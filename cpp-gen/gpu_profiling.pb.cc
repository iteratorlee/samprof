// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gpu_profiling.proto

#include "gpu_profiling.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace gpuprofiling {
constexpr CPUCallingContextTree_NodeMapEntry_DoNotUse::CPUCallingContextTree_NodeMapEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPUCallingContextTree_NodeMapEntry_DoNotUseDefaultTypeInternal {
  constexpr CPUCallingContextTree_NodeMapEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPUCallingContextTree_NodeMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CPUCallingContextTree_NodeMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPUCallingContextTree_NodeMapEntry_DoNotUseDefaultTypeInternal _CPUCallingContextTree_NodeMapEntry_DoNotUse_default_instance_;
constexpr CPUCallingContextTree::CPUCallingContextTree(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nodemap_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , root_(nullptr)
  , rootpc_(uint64_t{0u})
  , rootid_(uint64_t{0u}){}
struct CPUCallingContextTreeDefaultTypeInternal {
  constexpr CPUCallingContextTreeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPUCallingContextTreeDefaultTypeInternal() {}
  union {
    CPUCallingContextTree _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPUCallingContextTreeDefaultTypeInternal _CPUCallingContextTree_default_instance_;
constexpr CPUCallingContextNode::CPUCallingContextNode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : childs_()
  , childids_()
  , _childids_cached_byte_size_(0)
  , childpcs_()
  , _childpcs_cached_byte_size_(0)
  , funcname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(uint64_t{0u})
  , pc_(uint64_t{0u})
  , offset_(uint64_t{0u})
  , parentid_(uint64_t{0u})
  , parentpc_(uint64_t{0u}){}
struct CPUCallingContextNodeDefaultTypeInternal {
  constexpr CPUCallingContextNodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPUCallingContextNodeDefaultTypeInternal() {}
  union {
    CPUCallingContextNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPUCallingContextNodeDefaultTypeInternal _CPUCallingContextNode_default_instance_;
constexpr GPUCallingGraphNode::GPUCallingGraphNode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : funcname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cubincrc_(uint64_t{0u})
  , addrbegin_(uint64_t{0u})
  , addrend_(uint64_t{0u})
  , weight_(uint64_t{0u}){}
struct GPUCallingGraphNodeDefaultTypeInternal {
  constexpr GPUCallingGraphNodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GPUCallingGraphNodeDefaultTypeInternal() {}
  union {
    GPUCallingGraphNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GPUCallingGraphNodeDefaultTypeInternal _GPUCallingGraphNode_default_instance_;
constexpr GPUCallingGraphEdge::GPUCallingGraphEdge(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : srcfuncname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dstfuncname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , srcpcoffset_(uint64_t{0u})
  , dstpcoffset_(uint64_t{0u})
  , weight_(uint64_t{0u}){}
struct GPUCallingGraphEdgeDefaultTypeInternal {
  constexpr GPUCallingGraphEdgeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GPUCallingGraphEdgeDefaultTypeInternal() {}
  union {
    GPUCallingGraphEdge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GPUCallingGraphEdgeDefaultTypeInternal _GPUCallingGraphEdge_default_instance_;
constexpr GPUCallingGraph::GPUCallingGraph(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nodes_()
  , edges_(){}
struct GPUCallingGraphDefaultTypeInternal {
  constexpr GPUCallingGraphDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GPUCallingGraphDefaultTypeInternal() {}
  union {
    GPUCallingGraph _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GPUCallingGraphDefaultTypeInternal _GPUCallingGraph_default_instance_;
constexpr PCSamplingStallReason::PCSamplingStallReason(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pcsamplingstallreasonindex_(0u)
  , samples_(0u){}
struct PCSamplingStallReasonDefaultTypeInternal {
  constexpr PCSamplingStallReasonDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PCSamplingStallReasonDefaultTypeInternal() {}
  union {
    PCSamplingStallReason _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PCSamplingStallReasonDefaultTypeInternal _PCSamplingStallReason_default_instance_;
constexpr CUptiPCSamplingPCData::CUptiPCSamplingPCData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stallreason_()
  , functionname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cubincrc_(uint64_t{0u})
  , size_(0u)
  , functionindex_(0u)
  , pcoffset_(uint64_t{0u})
  , pad_(0u)
  , stallreasoncount_(0u)
  , parentcpupcid_(int64_t{0})
  , correlationid_(0u){}
struct CUptiPCSamplingPCDataDefaultTypeInternal {
  constexpr CUptiPCSamplingPCDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUptiPCSamplingPCDataDefaultTypeInternal() {}
  union {
    CUptiPCSamplingPCData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUptiPCSamplingPCDataDefaultTypeInternal _CUptiPCSamplingPCData_default_instance_;
constexpr CUptiPCSamplingData::CUptiPCSamplingData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ppcdata_()
  , size_(0u)
  , collectnumpcs_(0u)
  , totalsamples_(uint64_t{0u})
  , droppedsamples_(uint64_t{0u})
  , totalnumpcs_(0u)
  , remainingnumpcs_(0u)
  , rangeid_(uint64_t{0u})
  , nonusrkernelstotalsamples_(uint64_t{0u}){}
struct CUptiPCSamplingDataDefaultTypeInternal {
  constexpr CUptiPCSamplingDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUptiPCSamplingDataDefaultTypeInternal() {}
  union {
    CUptiPCSamplingData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUptiPCSamplingDataDefaultTypeInternal _CUptiPCSamplingData_default_instance_;
constexpr GPUProfilingRequest::GPUProfilingRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : duration_(0u){}
struct GPUProfilingRequestDefaultTypeInternal {
  constexpr GPUProfilingRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GPUProfilingRequestDefaultTypeInternal() {}
  union {
    GPUProfilingRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GPUProfilingRequestDefaultTypeInternal _GPUProfilingRequest_default_instance_;
constexpr GPUProfilingResponse::GPUProfilingResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pcsamplingdata_()
  , cpucallingctxtree_()
  , message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(false){}
struct GPUProfilingResponseDefaultTypeInternal {
  constexpr GPUProfilingResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GPUProfilingResponseDefaultTypeInternal() {}
  union {
    GPUProfilingResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GPUProfilingResponseDefaultTypeInternal _GPUProfilingResponse_default_instance_;
}  // namespace gpuprofiling
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gpu_5fprofiling_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_gpu_5fprofiling_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gpu_5fprofiling_2eproto = nullptr;

const uint32_t TableStruct_gpu_5fprofiling_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::CPUCallingContextTree_NodeMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::CPUCallingContextTree_NodeMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::CPUCallingContextTree_NodeMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::CPUCallingContextTree_NodeMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::CPUCallingContextTree, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::CPUCallingContextTree, root_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::CPUCallingContextTree, rootpc_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::CPUCallingContextTree, rootid_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::CPUCallingContextTree, nodemap_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::CPUCallingContextNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::CPUCallingContextNode, id_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::CPUCallingContextNode, pc_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::CPUCallingContextNode, offset_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::CPUCallingContextNode, funcname_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::CPUCallingContextNode, parentid_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::CPUCallingContextNode, parentpc_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::CPUCallingContextNode, childs_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::CPUCallingContextNode, childids_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::CPUCallingContextNode, childpcs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::GPUCallingGraphNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::GPUCallingGraphNode, cubincrc_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::GPUCallingGraphNode, funcname_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::GPUCallingGraphNode, addrbegin_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::GPUCallingGraphNode, addrend_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::GPUCallingGraphNode, weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::GPUCallingGraphEdge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::GPUCallingGraphEdge, srcfuncname_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::GPUCallingGraphEdge, srcpcoffset_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::GPUCallingGraphEdge, dstfuncname_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::GPUCallingGraphEdge, dstpcoffset_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::GPUCallingGraphEdge, weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::GPUCallingGraph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::GPUCallingGraph, nodes_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::GPUCallingGraph, edges_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::PCSamplingStallReason, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::PCSamplingStallReason, pcsamplingstallreasonindex_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::PCSamplingStallReason, samples_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::CUptiPCSamplingPCData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::CUptiPCSamplingPCData, size_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::CUptiPCSamplingPCData, cubincrc_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::CUptiPCSamplingPCData, pcoffset_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::CUptiPCSamplingPCData, functionindex_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::CUptiPCSamplingPCData, pad_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::CUptiPCSamplingPCData, functionname_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::CUptiPCSamplingPCData, stallreasoncount_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::CUptiPCSamplingPCData, stallreason_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::CUptiPCSamplingPCData, parentcpupcid_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::CUptiPCSamplingPCData, correlationid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::CUptiPCSamplingData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::CUptiPCSamplingData, size_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::CUptiPCSamplingData, collectnumpcs_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::CUptiPCSamplingData, totalsamples_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::CUptiPCSamplingData, droppedsamples_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::CUptiPCSamplingData, totalnumpcs_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::CUptiPCSamplingData, remainingnumpcs_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::CUptiPCSamplingData, rangeid_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::CUptiPCSamplingData, ppcdata_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::CUptiPCSamplingData, nonusrkernelstotalsamples_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::GPUProfilingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::GPUProfilingRequest, duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::GPUProfilingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::GPUProfilingResponse, message_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::GPUProfilingResponse, version_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::GPUProfilingResponse, pcsamplingdata_),
  PROTOBUF_FIELD_OFFSET(::gpuprofiling::GPUProfilingResponse, cpucallingctxtree_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::gpuprofiling::CPUCallingContextTree_NodeMapEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::gpuprofiling::CPUCallingContextTree)},
  { 20, -1, -1, sizeof(::gpuprofiling::CPUCallingContextNode)},
  { 35, -1, -1, sizeof(::gpuprofiling::GPUCallingGraphNode)},
  { 46, -1, -1, sizeof(::gpuprofiling::GPUCallingGraphEdge)},
  { 57, -1, -1, sizeof(::gpuprofiling::GPUCallingGraph)},
  { 65, -1, -1, sizeof(::gpuprofiling::PCSamplingStallReason)},
  { 73, -1, -1, sizeof(::gpuprofiling::CUptiPCSamplingPCData)},
  { 89, -1, -1, sizeof(::gpuprofiling::CUptiPCSamplingData)},
  { 104, -1, -1, sizeof(::gpuprofiling::GPUProfilingRequest)},
  { 111, -1, -1, sizeof(::gpuprofiling::GPUProfilingResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gpuprofiling::_CPUCallingContextTree_NodeMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gpuprofiling::_CPUCallingContextTree_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gpuprofiling::_CPUCallingContextNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gpuprofiling::_GPUCallingGraphNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gpuprofiling::_GPUCallingGraphEdge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gpuprofiling::_GPUCallingGraph_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gpuprofiling::_PCSamplingStallReason_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gpuprofiling::_CUptiPCSamplingPCData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gpuprofiling::_CUptiPCSamplingData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gpuprofiling::_GPUProfilingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gpuprofiling::_GPUProfilingResponse_default_instance_),
};

const char descriptor_table_protodef_gpu_5fprofiling_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023gpu_profiling.proto\022\014gpuprofiling\"\202\002\n\025"
  "CPUCallingContextTree\0221\n\004root\030\001 \001(\0132#.gp"
  "uprofiling.CPUCallingContextNode\022\016\n\006root"
  "PC\030\002 \001(\004\022\016\n\006rootID\030\003 \001(\004\022A\n\007nodeMap\030\004 \003("
  "\01320.gpuprofiling.CPUCallingContextTree.N"
  "odeMapEntry\032S\n\014NodeMapEntry\022\013\n\003key\030\001 \001(\003"
  "\0222\n\005value\030\002 \001(\0132#.gpuprofiling.CPUCallin"
  "gContextNode:\0028\001\"\316\001\n\025CPUCallingContextNo"
  "de\022\n\n\002id\030\001 \001(\004\022\n\n\002pc\030\002 \001(\004\022\016\n\006offset\030\003 \001"
  "(\004\022\020\n\010funcName\030\004 \001(\t\022\020\n\010parentID\030\005 \001(\004\022\020"
  "\n\010parentPC\030\006 \001(\004\0223\n\006childs\030\007 \003(\0132#.gpupr"
  "ofiling.CPUCallingContextNode\022\020\n\010childID"
  "s\030\010 \003(\004\022\020\n\010childPCs\030\t \003(\004\"m\n\023GPUCallingG"
  "raphNode\022\020\n\010cubinCrc\030\001 \001(\004\022\020\n\010funcName\030\002"
  " \001(\t\022\021\n\taddrBegin\030\003 \001(\004\022\017\n\007addrEnd\030\004 \001(\004"
  "\022\016\n\006weight\030\005 \001(\004\"y\n\023GPUCallingGraphEdge\022"
  "\023\n\013srcFuncName\030\001 \001(\t\022\023\n\013srcPCOffset\030\002 \001("
  "\004\022\023\n\013dstFuncName\030\003 \001(\t\022\023\n\013dstPCOffset\030\004 "
  "\001(\004\022\016\n\006weight\030\005 \001(\004\"u\n\017GPUCallingGraph\0220"
  "\n\005nodes\030\001 \003(\0132!.gpuprofiling.GPUCallingG"
  "raphNode\0220\n\005edges\030\002 \003(\0132!.gpuprofiling.G"
  "PUCallingGraphEdge\"L\n\025PCSamplingStallRea"
  "son\022\"\n\032pcSamplingStallReasonIndex\030\001 \001(\r\022"
  "\017\n\007samples\030\002 \001(\r\"\205\002\n\025CUptiPCSamplingPCDa"
  "ta\022\014\n\004size\030\001 \001(\r\022\020\n\010cubinCrc\030\002 \001(\004\022\020\n\010pc"
  "Offset\030\003 \001(\004\022\025\n\rfunctionIndex\030\004 \001(\r\022\013\n\003p"
  "ad\030\005 \001(\r\022\024\n\014functionName\030\006 \001(\t\022\030\n\020stallR"
  "easonCount\030\007 \001(\r\0228\n\013stallReason\030\010 \003(\0132#."
  "gpuprofiling.PCSamplingStallReason\022\025\n\rpa"
  "rentCPUPCID\030\t \001(\003\022\025\n\rcorrelationId\030\n \001(\r"
  "\"\200\002\n\023CUptiPCSamplingData\022\014\n\004size\030\001 \001(\r\022\025"
  "\n\rcollectNumPcs\030\002 \001(\r\022\024\n\014totalSamples\030\003 "
  "\001(\004\022\026\n\016droppedSamples\030\004 \001(\004\022\023\n\013totalNumP"
  "cs\030\005 \001(\r\022\027\n\017remainingNumPcs\030\006 \001(\r\022\017\n\007ran"
  "geId\030\007 \001(\004\0224\n\007pPcData\030\010 \003(\0132#.gpuprofili"
  "ng.CUptiPCSamplingPCData\022!\n\031nonUsrKernel"
  "sTotalSamples\030\t \001(\004\"\'\n\023GPUProfilingReque"
  "st\022\020\n\010duration\030\001 \001(\r\"\263\001\n\024GPUProfilingRes"
  "ponse\022\017\n\007message\030\001 \001(\t\022\017\n\007version\030\002 \001(\010\022"
  "9\n\016pcSamplingData\030\003 \003(\0132!.gpuprofiling.C"
  "UptiPCSamplingData\022>\n\021cpuCallingCtxTree\030"
  "\004 \003(\0132#.gpuprofiling.CPUCallingContextTr"
  "ee2u\n\023GPUProfilingService\022^\n\023PerformGPUP"
  "rofiling\022!.gpuprofiling.GPUProfilingRequ"
  "est\032\".gpuprofiling.GPUProfilingResponse\""
  "\000B\n\242\002\007GPUPROFb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gpu_5fprofiling_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gpu_5fprofiling_2eproto = {
  false, false, 1821, descriptor_table_protodef_gpu_5fprofiling_2eproto, "gpu_profiling.proto", 
  &descriptor_table_gpu_5fprofiling_2eproto_once, nullptr, 0, 11,
  schemas, file_default_instances, TableStruct_gpu_5fprofiling_2eproto::offsets,
  file_level_metadata_gpu_5fprofiling_2eproto, file_level_enum_descriptors_gpu_5fprofiling_2eproto, file_level_service_descriptors_gpu_5fprofiling_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_gpu_5fprofiling_2eproto_getter() {
  return &descriptor_table_gpu_5fprofiling_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_gpu_5fprofiling_2eproto(&descriptor_table_gpu_5fprofiling_2eproto);
namespace gpuprofiling {

// ===================================================================

CPUCallingContextTree_NodeMapEntry_DoNotUse::CPUCallingContextTree_NodeMapEntry_DoNotUse() {}
CPUCallingContextTree_NodeMapEntry_DoNotUse::CPUCallingContextTree_NodeMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CPUCallingContextTree_NodeMapEntry_DoNotUse::MergeFrom(const CPUCallingContextTree_NodeMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CPUCallingContextTree_NodeMapEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gpu_5fprofiling_2eproto_getter, &descriptor_table_gpu_5fprofiling_2eproto_once,
      file_level_metadata_gpu_5fprofiling_2eproto[0]);
}

// ===================================================================

class CPUCallingContextTree::_Internal {
 public:
  static const ::gpuprofiling::CPUCallingContextNode& root(const CPUCallingContextTree* msg);
};

const ::gpuprofiling::CPUCallingContextNode&
CPUCallingContextTree::_Internal::root(const CPUCallingContextTree* msg) {
  return *msg->root_;
}
CPUCallingContextTree::CPUCallingContextTree(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  nodemap_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gpuprofiling.CPUCallingContextTree)
}
CPUCallingContextTree::CPUCallingContextTree(const CPUCallingContextTree& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nodemap_.MergeFrom(from.nodemap_);
  if (from._internal_has_root()) {
    root_ = new ::gpuprofiling::CPUCallingContextNode(*from.root_);
  } else {
    root_ = nullptr;
  }
  ::memcpy(&rootpc_, &from.rootpc_,
    static_cast<size_t>(reinterpret_cast<char*>(&rootid_) -
    reinterpret_cast<char*>(&rootpc_)) + sizeof(rootid_));
  // @@protoc_insertion_point(copy_constructor:gpuprofiling.CPUCallingContextTree)
}

inline void CPUCallingContextTree::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&root_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rootid_) -
    reinterpret_cast<char*>(&root_)) + sizeof(rootid_));
}

CPUCallingContextTree::~CPUCallingContextTree() {
  // @@protoc_insertion_point(destructor:gpuprofiling.CPUCallingContextTree)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPUCallingContextTree::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete root_;
}

void CPUCallingContextTree::ArenaDtor(void* object) {
  CPUCallingContextTree* _this = reinterpret_cast< CPUCallingContextTree* >(object);
  (void)_this;
  _this->nodemap_. ~MapField();
}
inline void CPUCallingContextTree::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &CPUCallingContextTree::ArenaDtor);
  }
}
void CPUCallingContextTree::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPUCallingContextTree::Clear() {
// @@protoc_insertion_point(message_clear_start:gpuprofiling.CPUCallingContextTree)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodemap_.Clear();
  if (GetArenaForAllocation() == nullptr && root_ != nullptr) {
    delete root_;
  }
  root_ = nullptr;
  ::memset(&rootpc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rootid_) -
      reinterpret_cast<char*>(&rootpc_)) + sizeof(rootid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPUCallingContextTree::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .gpuprofiling.CPUCallingContextNode root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_root(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 rootPC = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          rootpc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 rootID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          rootid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int64, .gpuprofiling.CPUCallingContextNode> nodeMap = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&nodemap_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPUCallingContextTree::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gpuprofiling.CPUCallingContextTree)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .gpuprofiling.CPUCallingContextNode root = 1;
  if (this->_internal_has_root()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::root(this), target, stream);
  }

  // uint64 rootPC = 2;
  if (this->_internal_rootpc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_rootpc(), target);
  }

  // uint64 rootID = 3;
  if (this->_internal_rootid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_rootid(), target);
  }

  // map<int64, .gpuprofiling.CPUCallingContextNode> nodeMap = 4;
  if (!this->_internal_nodemap().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::gpuprofiling::CPUCallingContextNode >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< int64_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_nodemap().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_nodemap().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::gpuprofiling::CPUCallingContextNode >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::gpuprofiling::CPUCallingContextNode >::const_iterator
          it = this->_internal_nodemap().begin();
          it != this->_internal_nodemap().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = CPUCallingContextTree_NodeMapEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::gpuprofiling::CPUCallingContextNode >::const_iterator
          it = this->_internal_nodemap().begin();
          it != this->_internal_nodemap().end(); ++it) {
        target = CPUCallingContextTree_NodeMapEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gpuprofiling.CPUCallingContextTree)
  return target;
}

size_t CPUCallingContextTree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gpuprofiling.CPUCallingContextTree)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int64, .gpuprofiling.CPUCallingContextNode> nodeMap = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_nodemap_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::gpuprofiling::CPUCallingContextNode >::const_iterator
      it = this->_internal_nodemap().begin();
      it != this->_internal_nodemap().end(); ++it) {
    total_size += CPUCallingContextTree_NodeMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .gpuprofiling.CPUCallingContextNode root = 1;
  if (this->_internal_has_root()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *root_);
  }

  // uint64 rootPC = 2;
  if (this->_internal_rootpc() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_rootpc());
  }

  // uint64 rootID = 3;
  if (this->_internal_rootid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_rootid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPUCallingContextTree::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPUCallingContextTree::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPUCallingContextTree::GetClassData() const { return &_class_data_; }

void CPUCallingContextTree::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPUCallingContextTree *>(to)->MergeFrom(
      static_cast<const CPUCallingContextTree &>(from));
}


void CPUCallingContextTree::MergeFrom(const CPUCallingContextTree& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gpuprofiling.CPUCallingContextTree)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  nodemap_.MergeFrom(from.nodemap_);
  if (from._internal_has_root()) {
    _internal_mutable_root()->::gpuprofiling::CPUCallingContextNode::MergeFrom(from._internal_root());
  }
  if (from._internal_rootpc() != 0) {
    _internal_set_rootpc(from._internal_rootpc());
  }
  if (from._internal_rootid() != 0) {
    _internal_set_rootid(from._internal_rootid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPUCallingContextTree::CopyFrom(const CPUCallingContextTree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gpuprofiling.CPUCallingContextTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPUCallingContextTree::IsInitialized() const {
  return true;
}

void CPUCallingContextTree::InternalSwap(CPUCallingContextTree* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  nodemap_.InternalSwap(&other->nodemap_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPUCallingContextTree, rootid_)
      + sizeof(CPUCallingContextTree::rootid_)
      - PROTOBUF_FIELD_OFFSET(CPUCallingContextTree, root_)>(
          reinterpret_cast<char*>(&root_),
          reinterpret_cast<char*>(&other->root_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPUCallingContextTree::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gpu_5fprofiling_2eproto_getter, &descriptor_table_gpu_5fprofiling_2eproto_once,
      file_level_metadata_gpu_5fprofiling_2eproto[1]);
}

// ===================================================================

class CPUCallingContextNode::_Internal {
 public:
};

CPUCallingContextNode::CPUCallingContextNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  childs_(arena),
  childids_(arena),
  childpcs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gpuprofiling.CPUCallingContextNode)
}
CPUCallingContextNode::CPUCallingContextNode(const CPUCallingContextNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      childs_(from.childs_),
      childids_(from.childids_),
      childpcs_(from.childpcs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  funcname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    funcname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_funcname().empty()) {
    funcname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_funcname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&parentpc_) -
    reinterpret_cast<char*>(&id_)) + sizeof(parentpc_));
  // @@protoc_insertion_point(copy_constructor:gpuprofiling.CPUCallingContextNode)
}

inline void CPUCallingContextNode::SharedCtor() {
funcname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  funcname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&parentpc_) -
    reinterpret_cast<char*>(&id_)) + sizeof(parentpc_));
}

CPUCallingContextNode::~CPUCallingContextNode() {
  // @@protoc_insertion_point(destructor:gpuprofiling.CPUCallingContextNode)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPUCallingContextNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  funcname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPUCallingContextNode::ArenaDtor(void* object) {
  CPUCallingContextNode* _this = reinterpret_cast< CPUCallingContextNode* >(object);
  (void)_this;
}
void CPUCallingContextNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPUCallingContextNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPUCallingContextNode::Clear() {
// @@protoc_insertion_point(message_clear_start:gpuprofiling.CPUCallingContextNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  childs_.Clear();
  childids_.Clear();
  childpcs_.Clear();
  funcname_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parentpc_) -
      reinterpret_cast<char*>(&id_)) + sizeof(parentpc_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPUCallingContextNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 pc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          pc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string funcName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_funcname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gpuprofiling.CPUCallingContextNode.funcName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 parentID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          parentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 parentPC = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          parentpc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .gpuprofiling.CPUCallingContextNode childs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_childs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 childIDs = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_childids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_childids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 childPCs = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_childpcs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 72) {
          _internal_add_childpcs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPUCallingContextNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gpuprofiling.CPUCallingContextNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // uint64 pc = 2;
  if (this->_internal_pc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_pc(), target);
  }

  // uint64 offset = 3;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_offset(), target);
  }

  // string funcName = 4;
  if (!this->_internal_funcname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_funcname().data(), static_cast<int>(this->_internal_funcname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gpuprofiling.CPUCallingContextNode.funcName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_funcname(), target);
  }

  // uint64 parentID = 5;
  if (this->_internal_parentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_parentid(), target);
  }

  // uint64 parentPC = 6;
  if (this->_internal_parentpc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_parentpc(), target);
  }

  // repeated .gpuprofiling.CPUCallingContextNode childs = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_childs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_childs(i), target, stream);
  }

  // repeated uint64 childIDs = 8;
  {
    int byte_size = _childids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          8, _internal_childids(), byte_size, target);
    }
  }

  // repeated uint64 childPCs = 9;
  {
    int byte_size = _childpcs_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          9, _internal_childpcs(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gpuprofiling.CPUCallingContextNode)
  return target;
}

size_t CPUCallingContextNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gpuprofiling.CPUCallingContextNode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gpuprofiling.CPUCallingContextNode childs = 7;
  total_size += 1UL * this->_internal_childs_size();
  for (const auto& msg : this->childs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint64 childIDs = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->childids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _childids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 childPCs = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->childpcs_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _childpcs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string funcName = 4;
  if (!this->_internal_funcname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_funcname());
  }

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // uint64 pc = 2;
  if (this->_internal_pc() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_pc());
  }

  // uint64 offset = 3;
  if (this->_internal_offset() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_offset());
  }

  // uint64 parentID = 5;
  if (this->_internal_parentid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_parentid());
  }

  // uint64 parentPC = 6;
  if (this->_internal_parentpc() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_parentpc());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPUCallingContextNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPUCallingContextNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPUCallingContextNode::GetClassData() const { return &_class_data_; }

void CPUCallingContextNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPUCallingContextNode *>(to)->MergeFrom(
      static_cast<const CPUCallingContextNode &>(from));
}


void CPUCallingContextNode::MergeFrom(const CPUCallingContextNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gpuprofiling.CPUCallingContextNode)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  childs_.MergeFrom(from.childs_);
  childids_.MergeFrom(from.childids_);
  childpcs_.MergeFrom(from.childpcs_);
  if (!from._internal_funcname().empty()) {
    _internal_set_funcname(from._internal_funcname());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_pc() != 0) {
    _internal_set_pc(from._internal_pc());
  }
  if (from._internal_offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from._internal_parentid() != 0) {
    _internal_set_parentid(from._internal_parentid());
  }
  if (from._internal_parentpc() != 0) {
    _internal_set_parentpc(from._internal_parentpc());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPUCallingContextNode::CopyFrom(const CPUCallingContextNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gpuprofiling.CPUCallingContextNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPUCallingContextNode::IsInitialized() const {
  return true;
}

void CPUCallingContextNode::InternalSwap(CPUCallingContextNode* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  childs_.InternalSwap(&other->childs_);
  childids_.InternalSwap(&other->childids_);
  childpcs_.InternalSwap(&other->childpcs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &funcname_, lhs_arena,
      &other->funcname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPUCallingContextNode, parentpc_)
      + sizeof(CPUCallingContextNode::parentpc_)
      - PROTOBUF_FIELD_OFFSET(CPUCallingContextNode, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPUCallingContextNode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gpu_5fprofiling_2eproto_getter, &descriptor_table_gpu_5fprofiling_2eproto_once,
      file_level_metadata_gpu_5fprofiling_2eproto[2]);
}

// ===================================================================

class GPUCallingGraphNode::_Internal {
 public:
};

GPUCallingGraphNode::GPUCallingGraphNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gpuprofiling.GPUCallingGraphNode)
}
GPUCallingGraphNode::GPUCallingGraphNode(const GPUCallingGraphNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  funcname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    funcname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_funcname().empty()) {
    funcname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_funcname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&cubincrc_, &from.cubincrc_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&cubincrc_)) + sizeof(weight_));
  // @@protoc_insertion_point(copy_constructor:gpuprofiling.GPUCallingGraphNode)
}

inline void GPUCallingGraphNode::SharedCtor() {
funcname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  funcname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cubincrc_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&cubincrc_)) + sizeof(weight_));
}

GPUCallingGraphNode::~GPUCallingGraphNode() {
  // @@protoc_insertion_point(destructor:gpuprofiling.GPUCallingGraphNode)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GPUCallingGraphNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  funcname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GPUCallingGraphNode::ArenaDtor(void* object) {
  GPUCallingGraphNode* _this = reinterpret_cast< GPUCallingGraphNode* >(object);
  (void)_this;
}
void GPUCallingGraphNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GPUCallingGraphNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GPUCallingGraphNode::Clear() {
// @@protoc_insertion_point(message_clear_start:gpuprofiling.GPUCallingGraphNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  funcname_.ClearToEmpty();
  ::memset(&cubincrc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&cubincrc_)) + sizeof(weight_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GPUCallingGraphNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 cubinCrc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          cubincrc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string funcName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_funcname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gpuprofiling.GPUCallingGraphNode.funcName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 addrBegin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          addrbegin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 addrEnd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          addrend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 weight = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GPUCallingGraphNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gpuprofiling.GPUCallingGraphNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cubinCrc = 1;
  if (this->_internal_cubincrc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_cubincrc(), target);
  }

  // string funcName = 2;
  if (!this->_internal_funcname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_funcname().data(), static_cast<int>(this->_internal_funcname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gpuprofiling.GPUCallingGraphNode.funcName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_funcname(), target);
  }

  // uint64 addrBegin = 3;
  if (this->_internal_addrbegin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_addrbegin(), target);
  }

  // uint64 addrEnd = 4;
  if (this->_internal_addrend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_addrend(), target);
  }

  // uint64 weight = 5;
  if (this->_internal_weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gpuprofiling.GPUCallingGraphNode)
  return target;
}

size_t GPUCallingGraphNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gpuprofiling.GPUCallingGraphNode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string funcName = 2;
  if (!this->_internal_funcname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_funcname());
  }

  // uint64 cubinCrc = 1;
  if (this->_internal_cubincrc() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_cubincrc());
  }

  // uint64 addrBegin = 3;
  if (this->_internal_addrbegin() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_addrbegin());
  }

  // uint64 addrEnd = 4;
  if (this->_internal_addrend() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_addrend());
  }

  // uint64 weight = 5;
  if (this->_internal_weight() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_weight());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GPUCallingGraphNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GPUCallingGraphNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GPUCallingGraphNode::GetClassData() const { return &_class_data_; }

void GPUCallingGraphNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GPUCallingGraphNode *>(to)->MergeFrom(
      static_cast<const GPUCallingGraphNode &>(from));
}


void GPUCallingGraphNode::MergeFrom(const GPUCallingGraphNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gpuprofiling.GPUCallingGraphNode)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_funcname().empty()) {
    _internal_set_funcname(from._internal_funcname());
  }
  if (from._internal_cubincrc() != 0) {
    _internal_set_cubincrc(from._internal_cubincrc());
  }
  if (from._internal_addrbegin() != 0) {
    _internal_set_addrbegin(from._internal_addrbegin());
  }
  if (from._internal_addrend() != 0) {
    _internal_set_addrend(from._internal_addrend());
  }
  if (from._internal_weight() != 0) {
    _internal_set_weight(from._internal_weight());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GPUCallingGraphNode::CopyFrom(const GPUCallingGraphNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gpuprofiling.GPUCallingGraphNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPUCallingGraphNode::IsInitialized() const {
  return true;
}

void GPUCallingGraphNode::InternalSwap(GPUCallingGraphNode* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &funcname_, lhs_arena,
      &other->funcname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GPUCallingGraphNode, weight_)
      + sizeof(GPUCallingGraphNode::weight_)
      - PROTOBUF_FIELD_OFFSET(GPUCallingGraphNode, cubincrc_)>(
          reinterpret_cast<char*>(&cubincrc_),
          reinterpret_cast<char*>(&other->cubincrc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GPUCallingGraphNode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gpu_5fprofiling_2eproto_getter, &descriptor_table_gpu_5fprofiling_2eproto_once,
      file_level_metadata_gpu_5fprofiling_2eproto[3]);
}

// ===================================================================

class GPUCallingGraphEdge::_Internal {
 public:
};

GPUCallingGraphEdge::GPUCallingGraphEdge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gpuprofiling.GPUCallingGraphEdge)
}
GPUCallingGraphEdge::GPUCallingGraphEdge(const GPUCallingGraphEdge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  srcfuncname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    srcfuncname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_srcfuncname().empty()) {
    srcfuncname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_srcfuncname(), 
      GetArenaForAllocation());
  }
  dstfuncname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dstfuncname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dstfuncname().empty()) {
    dstfuncname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dstfuncname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&srcpcoffset_, &from.srcpcoffset_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&srcpcoffset_)) + sizeof(weight_));
  // @@protoc_insertion_point(copy_constructor:gpuprofiling.GPUCallingGraphEdge)
}

inline void GPUCallingGraphEdge::SharedCtor() {
srcfuncname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  srcfuncname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
dstfuncname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dstfuncname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&srcpcoffset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&srcpcoffset_)) + sizeof(weight_));
}

GPUCallingGraphEdge::~GPUCallingGraphEdge() {
  // @@protoc_insertion_point(destructor:gpuprofiling.GPUCallingGraphEdge)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GPUCallingGraphEdge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  srcfuncname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dstfuncname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GPUCallingGraphEdge::ArenaDtor(void* object) {
  GPUCallingGraphEdge* _this = reinterpret_cast< GPUCallingGraphEdge* >(object);
  (void)_this;
}
void GPUCallingGraphEdge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GPUCallingGraphEdge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GPUCallingGraphEdge::Clear() {
// @@protoc_insertion_point(message_clear_start:gpuprofiling.GPUCallingGraphEdge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  srcfuncname_.ClearToEmpty();
  dstfuncname_.ClearToEmpty();
  ::memset(&srcpcoffset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&srcpcoffset_)) + sizeof(weight_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GPUCallingGraphEdge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string srcFuncName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_srcfuncname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gpuprofiling.GPUCallingGraphEdge.srcFuncName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 srcPCOffset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          srcpcoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dstFuncName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_dstfuncname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gpuprofiling.GPUCallingGraphEdge.dstFuncName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 dstPCOffset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          dstpcoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 weight = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GPUCallingGraphEdge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gpuprofiling.GPUCallingGraphEdge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string srcFuncName = 1;
  if (!this->_internal_srcfuncname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_srcfuncname().data(), static_cast<int>(this->_internal_srcfuncname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gpuprofiling.GPUCallingGraphEdge.srcFuncName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_srcfuncname(), target);
  }

  // uint64 srcPCOffset = 2;
  if (this->_internal_srcpcoffset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_srcpcoffset(), target);
  }

  // string dstFuncName = 3;
  if (!this->_internal_dstfuncname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dstfuncname().data(), static_cast<int>(this->_internal_dstfuncname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gpuprofiling.GPUCallingGraphEdge.dstFuncName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_dstfuncname(), target);
  }

  // uint64 dstPCOffset = 4;
  if (this->_internal_dstpcoffset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_dstpcoffset(), target);
  }

  // uint64 weight = 5;
  if (this->_internal_weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gpuprofiling.GPUCallingGraphEdge)
  return target;
}

size_t GPUCallingGraphEdge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gpuprofiling.GPUCallingGraphEdge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string srcFuncName = 1;
  if (!this->_internal_srcfuncname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcfuncname());
  }

  // string dstFuncName = 3;
  if (!this->_internal_dstfuncname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dstfuncname());
  }

  // uint64 srcPCOffset = 2;
  if (this->_internal_srcpcoffset() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_srcpcoffset());
  }

  // uint64 dstPCOffset = 4;
  if (this->_internal_dstpcoffset() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_dstpcoffset());
  }

  // uint64 weight = 5;
  if (this->_internal_weight() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_weight());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GPUCallingGraphEdge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GPUCallingGraphEdge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GPUCallingGraphEdge::GetClassData() const { return &_class_data_; }

void GPUCallingGraphEdge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GPUCallingGraphEdge *>(to)->MergeFrom(
      static_cast<const GPUCallingGraphEdge &>(from));
}


void GPUCallingGraphEdge::MergeFrom(const GPUCallingGraphEdge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gpuprofiling.GPUCallingGraphEdge)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_srcfuncname().empty()) {
    _internal_set_srcfuncname(from._internal_srcfuncname());
  }
  if (!from._internal_dstfuncname().empty()) {
    _internal_set_dstfuncname(from._internal_dstfuncname());
  }
  if (from._internal_srcpcoffset() != 0) {
    _internal_set_srcpcoffset(from._internal_srcpcoffset());
  }
  if (from._internal_dstpcoffset() != 0) {
    _internal_set_dstpcoffset(from._internal_dstpcoffset());
  }
  if (from._internal_weight() != 0) {
    _internal_set_weight(from._internal_weight());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GPUCallingGraphEdge::CopyFrom(const GPUCallingGraphEdge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gpuprofiling.GPUCallingGraphEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPUCallingGraphEdge::IsInitialized() const {
  return true;
}

void GPUCallingGraphEdge::InternalSwap(GPUCallingGraphEdge* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &srcfuncname_, lhs_arena,
      &other->srcfuncname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dstfuncname_, lhs_arena,
      &other->dstfuncname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GPUCallingGraphEdge, weight_)
      + sizeof(GPUCallingGraphEdge::weight_)
      - PROTOBUF_FIELD_OFFSET(GPUCallingGraphEdge, srcpcoffset_)>(
          reinterpret_cast<char*>(&srcpcoffset_),
          reinterpret_cast<char*>(&other->srcpcoffset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GPUCallingGraphEdge::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gpu_5fprofiling_2eproto_getter, &descriptor_table_gpu_5fprofiling_2eproto_once,
      file_level_metadata_gpu_5fprofiling_2eproto[4]);
}

// ===================================================================

class GPUCallingGraph::_Internal {
 public:
};

GPUCallingGraph::GPUCallingGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  nodes_(arena),
  edges_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gpuprofiling.GPUCallingGraph)
}
GPUCallingGraph::GPUCallingGraph(const GPUCallingGraph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nodes_(from.nodes_),
      edges_(from.edges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gpuprofiling.GPUCallingGraph)
}

inline void GPUCallingGraph::SharedCtor() {
}

GPUCallingGraph::~GPUCallingGraph() {
  // @@protoc_insertion_point(destructor:gpuprofiling.GPUCallingGraph)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GPUCallingGraph::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GPUCallingGraph::ArenaDtor(void* object) {
  GPUCallingGraph* _this = reinterpret_cast< GPUCallingGraph* >(object);
  (void)_this;
}
void GPUCallingGraph::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GPUCallingGraph::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GPUCallingGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:gpuprofiling.GPUCallingGraph)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  edges_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GPUCallingGraph::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .gpuprofiling.GPUCallingGraphNode nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .gpuprofiling.GPUCallingGraphEdge edges = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GPUCallingGraph::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gpuprofiling.GPUCallingGraph)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gpuprofiling.GPUCallingGraphNode nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_nodes(i), target, stream);
  }

  // repeated .gpuprofiling.GPUCallingGraphEdge edges = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_edges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_edges(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gpuprofiling.GPUCallingGraph)
  return target;
}

size_t GPUCallingGraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gpuprofiling.GPUCallingGraph)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gpuprofiling.GPUCallingGraphNode nodes = 1;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gpuprofiling.GPUCallingGraphEdge edges = 2;
  total_size += 1UL * this->_internal_edges_size();
  for (const auto& msg : this->edges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GPUCallingGraph::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GPUCallingGraph::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GPUCallingGraph::GetClassData() const { return &_class_data_; }

void GPUCallingGraph::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GPUCallingGraph *>(to)->MergeFrom(
      static_cast<const GPUCallingGraph &>(from));
}


void GPUCallingGraph::MergeFrom(const GPUCallingGraph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gpuprofiling.GPUCallingGraph)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  edges_.MergeFrom(from.edges_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GPUCallingGraph::CopyFrom(const GPUCallingGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gpuprofiling.GPUCallingGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPUCallingGraph::IsInitialized() const {
  return true;
}

void GPUCallingGraph::InternalSwap(GPUCallingGraph* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  nodes_.InternalSwap(&other->nodes_);
  edges_.InternalSwap(&other->edges_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GPUCallingGraph::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gpu_5fprofiling_2eproto_getter, &descriptor_table_gpu_5fprofiling_2eproto_once,
      file_level_metadata_gpu_5fprofiling_2eproto[5]);
}

// ===================================================================

class PCSamplingStallReason::_Internal {
 public:
};

PCSamplingStallReason::PCSamplingStallReason(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gpuprofiling.PCSamplingStallReason)
}
PCSamplingStallReason::PCSamplingStallReason(const PCSamplingStallReason& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pcsamplingstallreasonindex_, &from.pcsamplingstallreasonindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&samples_) -
    reinterpret_cast<char*>(&pcsamplingstallreasonindex_)) + sizeof(samples_));
  // @@protoc_insertion_point(copy_constructor:gpuprofiling.PCSamplingStallReason)
}

inline void PCSamplingStallReason::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pcsamplingstallreasonindex_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&samples_) -
    reinterpret_cast<char*>(&pcsamplingstallreasonindex_)) + sizeof(samples_));
}

PCSamplingStallReason::~PCSamplingStallReason() {
  // @@protoc_insertion_point(destructor:gpuprofiling.PCSamplingStallReason)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PCSamplingStallReason::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PCSamplingStallReason::ArenaDtor(void* object) {
  PCSamplingStallReason* _this = reinterpret_cast< PCSamplingStallReason* >(object);
  (void)_this;
}
void PCSamplingStallReason::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PCSamplingStallReason::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PCSamplingStallReason::Clear() {
// @@protoc_insertion_point(message_clear_start:gpuprofiling.PCSamplingStallReason)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pcsamplingstallreasonindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&samples_) -
      reinterpret_cast<char*>(&pcsamplingstallreasonindex_)) + sizeof(samples_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PCSamplingStallReason::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pcSamplingStallReasonIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          pcsamplingstallreasonindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 samples = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          samples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PCSamplingStallReason::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gpuprofiling.PCSamplingStallReason)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pcSamplingStallReasonIndex = 1;
  if (this->_internal_pcsamplingstallreasonindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pcsamplingstallreasonindex(), target);
  }

  // uint32 samples = 2;
  if (this->_internal_samples() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_samples(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gpuprofiling.PCSamplingStallReason)
  return target;
}

size_t PCSamplingStallReason::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gpuprofiling.PCSamplingStallReason)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pcSamplingStallReasonIndex = 1;
  if (this->_internal_pcsamplingstallreasonindex() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_pcsamplingstallreasonindex());
  }

  // uint32 samples = 2;
  if (this->_internal_samples() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_samples());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PCSamplingStallReason::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PCSamplingStallReason::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PCSamplingStallReason::GetClassData() const { return &_class_data_; }

void PCSamplingStallReason::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PCSamplingStallReason *>(to)->MergeFrom(
      static_cast<const PCSamplingStallReason &>(from));
}


void PCSamplingStallReason::MergeFrom(const PCSamplingStallReason& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gpuprofiling.PCSamplingStallReason)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pcsamplingstallreasonindex() != 0) {
    _internal_set_pcsamplingstallreasonindex(from._internal_pcsamplingstallreasonindex());
  }
  if (from._internal_samples() != 0) {
    _internal_set_samples(from._internal_samples());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PCSamplingStallReason::CopyFrom(const PCSamplingStallReason& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gpuprofiling.PCSamplingStallReason)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PCSamplingStallReason::IsInitialized() const {
  return true;
}

void PCSamplingStallReason::InternalSwap(PCSamplingStallReason* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PCSamplingStallReason, samples_)
      + sizeof(PCSamplingStallReason::samples_)
      - PROTOBUF_FIELD_OFFSET(PCSamplingStallReason, pcsamplingstallreasonindex_)>(
          reinterpret_cast<char*>(&pcsamplingstallreasonindex_),
          reinterpret_cast<char*>(&other->pcsamplingstallreasonindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PCSamplingStallReason::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gpu_5fprofiling_2eproto_getter, &descriptor_table_gpu_5fprofiling_2eproto_once,
      file_level_metadata_gpu_5fprofiling_2eproto[6]);
}

// ===================================================================

class CUptiPCSamplingPCData::_Internal {
 public:
};

CUptiPCSamplingPCData::CUptiPCSamplingPCData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  stallreason_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gpuprofiling.CUptiPCSamplingPCData)
}
CUptiPCSamplingPCData::CUptiPCSamplingPCData(const CUptiPCSamplingPCData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stallreason_(from.stallreason_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  functionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    functionname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_functionname().empty()) {
    functionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_functionname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&cubincrc_, &from.cubincrc_,
    static_cast<size_t>(reinterpret_cast<char*>(&correlationid_) -
    reinterpret_cast<char*>(&cubincrc_)) + sizeof(correlationid_));
  // @@protoc_insertion_point(copy_constructor:gpuprofiling.CUptiPCSamplingPCData)
}

inline void CUptiPCSamplingPCData::SharedCtor() {
functionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  functionname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cubincrc_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&correlationid_) -
    reinterpret_cast<char*>(&cubincrc_)) + sizeof(correlationid_));
}

CUptiPCSamplingPCData::~CUptiPCSamplingPCData() {
  // @@protoc_insertion_point(destructor:gpuprofiling.CUptiPCSamplingPCData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CUptiPCSamplingPCData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  functionname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CUptiPCSamplingPCData::ArenaDtor(void* object) {
  CUptiPCSamplingPCData* _this = reinterpret_cast< CUptiPCSamplingPCData* >(object);
  (void)_this;
}
void CUptiPCSamplingPCData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUptiPCSamplingPCData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUptiPCSamplingPCData::Clear() {
// @@protoc_insertion_point(message_clear_start:gpuprofiling.CUptiPCSamplingPCData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stallreason_.Clear();
  functionname_.ClearToEmpty();
  ::memset(&cubincrc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&correlationid_) -
      reinterpret_cast<char*>(&cubincrc_)) + sizeof(correlationid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUptiPCSamplingPCData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 cubinCrc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          cubincrc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 pcOffset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          pcoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 functionIndex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          functionindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pad = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          pad_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string functionName = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_functionname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gpuprofiling.CUptiPCSamplingPCData.functionName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 stallReasonCount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          stallreasoncount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .gpuprofiling.PCSamplingStallReason stallReason = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stallreason(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 parentCPUPCID = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          parentcpupcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 correlationId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          correlationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CUptiPCSamplingPCData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gpuprofiling.CUptiPCSamplingPCData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 size = 1;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_size(), target);
  }

  // uint64 cubinCrc = 2;
  if (this->_internal_cubincrc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_cubincrc(), target);
  }

  // uint64 pcOffset = 3;
  if (this->_internal_pcoffset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_pcoffset(), target);
  }

  // uint32 functionIndex = 4;
  if (this->_internal_functionindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_functionindex(), target);
  }

  // uint32 pad = 5;
  if (this->_internal_pad() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_pad(), target);
  }

  // string functionName = 6;
  if (!this->_internal_functionname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_functionname().data(), static_cast<int>(this->_internal_functionname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gpuprofiling.CUptiPCSamplingPCData.functionName");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_functionname(), target);
  }

  // uint32 stallReasonCount = 7;
  if (this->_internal_stallreasoncount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_stallreasoncount(), target);
  }

  // repeated .gpuprofiling.PCSamplingStallReason stallReason = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stallreason_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_stallreason(i), target, stream);
  }

  // int64 parentCPUPCID = 9;
  if (this->_internal_parentcpupcid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_parentcpupcid(), target);
  }

  // uint32 correlationId = 10;
  if (this->_internal_correlationid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_correlationid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gpuprofiling.CUptiPCSamplingPCData)
  return target;
}

size_t CUptiPCSamplingPCData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gpuprofiling.CUptiPCSamplingPCData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gpuprofiling.PCSamplingStallReason stallReason = 8;
  total_size += 1UL * this->_internal_stallreason_size();
  for (const auto& msg : this->stallreason_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string functionName = 6;
  if (!this->_internal_functionname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_functionname());
  }

  // uint64 cubinCrc = 2;
  if (this->_internal_cubincrc() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_cubincrc());
  }

  // uint32 size = 1;
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
  }

  // uint32 functionIndex = 4;
  if (this->_internal_functionindex() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_functionindex());
  }

  // uint64 pcOffset = 3;
  if (this->_internal_pcoffset() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_pcoffset());
  }

  // uint32 pad = 5;
  if (this->_internal_pad() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_pad());
  }

  // uint32 stallReasonCount = 7;
  if (this->_internal_stallreasoncount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_stallreasoncount());
  }

  // int64 parentCPUPCID = 9;
  if (this->_internal_parentcpupcid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_parentcpupcid());
  }

  // uint32 correlationId = 10;
  if (this->_internal_correlationid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_correlationid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CUptiPCSamplingPCData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CUptiPCSamplingPCData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CUptiPCSamplingPCData::GetClassData() const { return &_class_data_; }

void CUptiPCSamplingPCData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CUptiPCSamplingPCData *>(to)->MergeFrom(
      static_cast<const CUptiPCSamplingPCData &>(from));
}


void CUptiPCSamplingPCData::MergeFrom(const CUptiPCSamplingPCData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gpuprofiling.CUptiPCSamplingPCData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  stallreason_.MergeFrom(from.stallreason_);
  if (!from._internal_functionname().empty()) {
    _internal_set_functionname(from._internal_functionname());
  }
  if (from._internal_cubincrc() != 0) {
    _internal_set_cubincrc(from._internal_cubincrc());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from._internal_functionindex() != 0) {
    _internal_set_functionindex(from._internal_functionindex());
  }
  if (from._internal_pcoffset() != 0) {
    _internal_set_pcoffset(from._internal_pcoffset());
  }
  if (from._internal_pad() != 0) {
    _internal_set_pad(from._internal_pad());
  }
  if (from._internal_stallreasoncount() != 0) {
    _internal_set_stallreasoncount(from._internal_stallreasoncount());
  }
  if (from._internal_parentcpupcid() != 0) {
    _internal_set_parentcpupcid(from._internal_parentcpupcid());
  }
  if (from._internal_correlationid() != 0) {
    _internal_set_correlationid(from._internal_correlationid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CUptiPCSamplingPCData::CopyFrom(const CUptiPCSamplingPCData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gpuprofiling.CUptiPCSamplingPCData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUptiPCSamplingPCData::IsInitialized() const {
  return true;
}

void CUptiPCSamplingPCData::InternalSwap(CUptiPCSamplingPCData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  stallreason_.InternalSwap(&other->stallreason_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &functionname_, lhs_arena,
      &other->functionname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUptiPCSamplingPCData, correlationid_)
      + sizeof(CUptiPCSamplingPCData::correlationid_)
      - PROTOBUF_FIELD_OFFSET(CUptiPCSamplingPCData, cubincrc_)>(
          reinterpret_cast<char*>(&cubincrc_),
          reinterpret_cast<char*>(&other->cubincrc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUptiPCSamplingPCData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gpu_5fprofiling_2eproto_getter, &descriptor_table_gpu_5fprofiling_2eproto_once,
      file_level_metadata_gpu_5fprofiling_2eproto[7]);
}

// ===================================================================

class CUptiPCSamplingData::_Internal {
 public:
};

CUptiPCSamplingData::CUptiPCSamplingData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ppcdata_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gpuprofiling.CUptiPCSamplingData)
}
CUptiPCSamplingData::CUptiPCSamplingData(const CUptiPCSamplingData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ppcdata_(from.ppcdata_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&nonusrkernelstotalsamples_) -
    reinterpret_cast<char*>(&size_)) + sizeof(nonusrkernelstotalsamples_));
  // @@protoc_insertion_point(copy_constructor:gpuprofiling.CUptiPCSamplingData)
}

inline void CUptiPCSamplingData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nonusrkernelstotalsamples_) -
    reinterpret_cast<char*>(&size_)) + sizeof(nonusrkernelstotalsamples_));
}

CUptiPCSamplingData::~CUptiPCSamplingData() {
  // @@protoc_insertion_point(destructor:gpuprofiling.CUptiPCSamplingData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CUptiPCSamplingData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CUptiPCSamplingData::ArenaDtor(void* object) {
  CUptiPCSamplingData* _this = reinterpret_cast< CUptiPCSamplingData* >(object);
  (void)_this;
}
void CUptiPCSamplingData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUptiPCSamplingData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUptiPCSamplingData::Clear() {
// @@protoc_insertion_point(message_clear_start:gpuprofiling.CUptiPCSamplingData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ppcdata_.Clear();
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nonusrkernelstotalsamples_) -
      reinterpret_cast<char*>(&size_)) + sizeof(nonusrkernelstotalsamples_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUptiPCSamplingData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 collectNumPcs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          collectnumpcs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 totalSamples = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          totalsamples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 droppedSamples = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          droppedsamples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 totalNumPcs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          totalnumpcs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 remainingNumPcs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          remainingnumpcs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 rangeId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          rangeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .gpuprofiling.CUptiPCSamplingPCData pPcData = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ppcdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 nonUsrKernelsTotalSamples = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          nonusrkernelstotalsamples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CUptiPCSamplingData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gpuprofiling.CUptiPCSamplingData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 size = 1;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_size(), target);
  }

  // uint32 collectNumPcs = 2;
  if (this->_internal_collectnumpcs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_collectnumpcs(), target);
  }

  // uint64 totalSamples = 3;
  if (this->_internal_totalsamples() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_totalsamples(), target);
  }

  // uint64 droppedSamples = 4;
  if (this->_internal_droppedsamples() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_droppedsamples(), target);
  }

  // uint32 totalNumPcs = 5;
  if (this->_internal_totalnumpcs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_totalnumpcs(), target);
  }

  // uint32 remainingNumPcs = 6;
  if (this->_internal_remainingnumpcs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_remainingnumpcs(), target);
  }

  // uint64 rangeId = 7;
  if (this->_internal_rangeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_rangeid(), target);
  }

  // repeated .gpuprofiling.CUptiPCSamplingPCData pPcData = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ppcdata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_ppcdata(i), target, stream);
  }

  // uint64 nonUsrKernelsTotalSamples = 9;
  if (this->_internal_nonusrkernelstotalsamples() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_nonusrkernelstotalsamples(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gpuprofiling.CUptiPCSamplingData)
  return target;
}

size_t CUptiPCSamplingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gpuprofiling.CUptiPCSamplingData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gpuprofiling.CUptiPCSamplingPCData pPcData = 8;
  total_size += 1UL * this->_internal_ppcdata_size();
  for (const auto& msg : this->ppcdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 size = 1;
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
  }

  // uint32 collectNumPcs = 2;
  if (this->_internal_collectnumpcs() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_collectnumpcs());
  }

  // uint64 totalSamples = 3;
  if (this->_internal_totalsamples() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_totalsamples());
  }

  // uint64 droppedSamples = 4;
  if (this->_internal_droppedsamples() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_droppedsamples());
  }

  // uint32 totalNumPcs = 5;
  if (this->_internal_totalnumpcs() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_totalnumpcs());
  }

  // uint32 remainingNumPcs = 6;
  if (this->_internal_remainingnumpcs() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_remainingnumpcs());
  }

  // uint64 rangeId = 7;
  if (this->_internal_rangeid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_rangeid());
  }

  // uint64 nonUsrKernelsTotalSamples = 9;
  if (this->_internal_nonusrkernelstotalsamples() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_nonusrkernelstotalsamples());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CUptiPCSamplingData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CUptiPCSamplingData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CUptiPCSamplingData::GetClassData() const { return &_class_data_; }

void CUptiPCSamplingData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CUptiPCSamplingData *>(to)->MergeFrom(
      static_cast<const CUptiPCSamplingData &>(from));
}


void CUptiPCSamplingData::MergeFrom(const CUptiPCSamplingData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gpuprofiling.CUptiPCSamplingData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ppcdata_.MergeFrom(from.ppcdata_);
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from._internal_collectnumpcs() != 0) {
    _internal_set_collectnumpcs(from._internal_collectnumpcs());
  }
  if (from._internal_totalsamples() != 0) {
    _internal_set_totalsamples(from._internal_totalsamples());
  }
  if (from._internal_droppedsamples() != 0) {
    _internal_set_droppedsamples(from._internal_droppedsamples());
  }
  if (from._internal_totalnumpcs() != 0) {
    _internal_set_totalnumpcs(from._internal_totalnumpcs());
  }
  if (from._internal_remainingnumpcs() != 0) {
    _internal_set_remainingnumpcs(from._internal_remainingnumpcs());
  }
  if (from._internal_rangeid() != 0) {
    _internal_set_rangeid(from._internal_rangeid());
  }
  if (from._internal_nonusrkernelstotalsamples() != 0) {
    _internal_set_nonusrkernelstotalsamples(from._internal_nonusrkernelstotalsamples());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CUptiPCSamplingData::CopyFrom(const CUptiPCSamplingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gpuprofiling.CUptiPCSamplingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUptiPCSamplingData::IsInitialized() const {
  return true;
}

void CUptiPCSamplingData::InternalSwap(CUptiPCSamplingData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ppcdata_.InternalSwap(&other->ppcdata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUptiPCSamplingData, nonusrkernelstotalsamples_)
      + sizeof(CUptiPCSamplingData::nonusrkernelstotalsamples_)
      - PROTOBUF_FIELD_OFFSET(CUptiPCSamplingData, size_)>(
          reinterpret_cast<char*>(&size_),
          reinterpret_cast<char*>(&other->size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUptiPCSamplingData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gpu_5fprofiling_2eproto_getter, &descriptor_table_gpu_5fprofiling_2eproto_once,
      file_level_metadata_gpu_5fprofiling_2eproto[8]);
}

// ===================================================================

class GPUProfilingRequest::_Internal {
 public:
};

GPUProfilingRequest::GPUProfilingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gpuprofiling.GPUProfilingRequest)
}
GPUProfilingRequest::GPUProfilingRequest(const GPUProfilingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  duration_ = from.duration_;
  // @@protoc_insertion_point(copy_constructor:gpuprofiling.GPUProfilingRequest)
}

inline void GPUProfilingRequest::SharedCtor() {
duration_ = 0u;
}

GPUProfilingRequest::~GPUProfilingRequest() {
  // @@protoc_insertion_point(destructor:gpuprofiling.GPUProfilingRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GPUProfilingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GPUProfilingRequest::ArenaDtor(void* object) {
  GPUProfilingRequest* _this = reinterpret_cast< GPUProfilingRequest* >(object);
  (void)_this;
}
void GPUProfilingRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GPUProfilingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GPUProfilingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gpuprofiling.GPUProfilingRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  duration_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GPUProfilingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 duration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GPUProfilingRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gpuprofiling.GPUProfilingRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 duration = 1;
  if (this->_internal_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gpuprofiling.GPUProfilingRequest)
  return target;
}

size_t GPUProfilingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gpuprofiling.GPUProfilingRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 duration = 1;
  if (this->_internal_duration() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_duration());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GPUProfilingRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GPUProfilingRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GPUProfilingRequest::GetClassData() const { return &_class_data_; }

void GPUProfilingRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GPUProfilingRequest *>(to)->MergeFrom(
      static_cast<const GPUProfilingRequest &>(from));
}


void GPUProfilingRequest::MergeFrom(const GPUProfilingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gpuprofiling.GPUProfilingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_duration() != 0) {
    _internal_set_duration(from._internal_duration());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GPUProfilingRequest::CopyFrom(const GPUProfilingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gpuprofiling.GPUProfilingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPUProfilingRequest::IsInitialized() const {
  return true;
}

void GPUProfilingRequest::InternalSwap(GPUProfilingRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(duration_, other->duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GPUProfilingRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gpu_5fprofiling_2eproto_getter, &descriptor_table_gpu_5fprofiling_2eproto_once,
      file_level_metadata_gpu_5fprofiling_2eproto[9]);
}

// ===================================================================

class GPUProfilingResponse::_Internal {
 public:
};

GPUProfilingResponse::GPUProfilingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pcsamplingdata_(arena),
  cpucallingctxtree_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gpuprofiling.GPUProfilingResponse)
}
GPUProfilingResponse::GPUProfilingResponse(const GPUProfilingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pcsamplingdata_(from.pcsamplingdata_),
      cpucallingctxtree_(from.cpucallingctxtree_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:gpuprofiling.GPUProfilingResponse)
}

inline void GPUProfilingResponse::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_ = false;
}

GPUProfilingResponse::~GPUProfilingResponse() {
  // @@protoc_insertion_point(destructor:gpuprofiling.GPUProfilingResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GPUProfilingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GPUProfilingResponse::ArenaDtor(void* object) {
  GPUProfilingResponse* _this = reinterpret_cast< GPUProfilingResponse* >(object);
  (void)_this;
}
void GPUProfilingResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GPUProfilingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GPUProfilingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gpuprofiling.GPUProfilingResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pcsamplingdata_.Clear();
  cpucallingctxtree_.Clear();
  message_.ClearToEmpty();
  version_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GPUProfilingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gpuprofiling.GPUProfilingResponse.message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .gpuprofiling.CUptiPCSamplingData pcSamplingData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pcsamplingdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .gpuprofiling.CPUCallingContextTree cpuCallingCtxTree = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cpucallingctxtree(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GPUProfilingResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gpuprofiling.GPUProfilingResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gpuprofiling.GPUProfilingResponse.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // bool version = 2;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_version(), target);
  }

  // repeated .gpuprofiling.CUptiPCSamplingData pcSamplingData = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pcsamplingdata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_pcsamplingdata(i), target, stream);
  }

  // repeated .gpuprofiling.CPUCallingContextTree cpuCallingCtxTree = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cpucallingctxtree_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_cpucallingctxtree(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gpuprofiling.GPUProfilingResponse)
  return target;
}

size_t GPUProfilingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gpuprofiling.GPUProfilingResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gpuprofiling.CUptiPCSamplingData pcSamplingData = 3;
  total_size += 1UL * this->_internal_pcsamplingdata_size();
  for (const auto& msg : this->pcsamplingdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gpuprofiling.CPUCallingContextTree cpuCallingCtxTree = 4;
  total_size += 1UL * this->_internal_cpucallingctxtree_size();
  for (const auto& msg : this->cpucallingctxtree_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool version = 2;
  if (this->_internal_version() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GPUProfilingResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GPUProfilingResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GPUProfilingResponse::GetClassData() const { return &_class_data_; }

void GPUProfilingResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GPUProfilingResponse *>(to)->MergeFrom(
      static_cast<const GPUProfilingResponse &>(from));
}


void GPUProfilingResponse::MergeFrom(const GPUProfilingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gpuprofiling.GPUProfilingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  pcsamplingdata_.MergeFrom(from.pcsamplingdata_);
  cpucallingctxtree_.MergeFrom(from.cpucallingctxtree_);
  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_version() != 0) {
    _internal_set_version(from._internal_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GPUProfilingResponse::CopyFrom(const GPUProfilingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gpuprofiling.GPUProfilingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPUProfilingResponse::IsInitialized() const {
  return true;
}

void GPUProfilingResponse::InternalSwap(GPUProfilingResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pcsamplingdata_.InternalSwap(&other->pcsamplingdata_);
  cpucallingctxtree_.InternalSwap(&other->cpucallingctxtree_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GPUProfilingResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gpu_5fprofiling_2eproto_getter, &descriptor_table_gpu_5fprofiling_2eproto_once,
      file_level_metadata_gpu_5fprofiling_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace gpuprofiling
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gpuprofiling::CPUCallingContextTree_NodeMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::gpuprofiling::CPUCallingContextTree_NodeMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gpuprofiling::CPUCallingContextTree_NodeMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::gpuprofiling::CPUCallingContextTree* Arena::CreateMaybeMessage< ::gpuprofiling::CPUCallingContextTree >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gpuprofiling::CPUCallingContextTree >(arena);
}
template<> PROTOBUF_NOINLINE ::gpuprofiling::CPUCallingContextNode* Arena::CreateMaybeMessage< ::gpuprofiling::CPUCallingContextNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gpuprofiling::CPUCallingContextNode >(arena);
}
template<> PROTOBUF_NOINLINE ::gpuprofiling::GPUCallingGraphNode* Arena::CreateMaybeMessage< ::gpuprofiling::GPUCallingGraphNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gpuprofiling::GPUCallingGraphNode >(arena);
}
template<> PROTOBUF_NOINLINE ::gpuprofiling::GPUCallingGraphEdge* Arena::CreateMaybeMessage< ::gpuprofiling::GPUCallingGraphEdge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gpuprofiling::GPUCallingGraphEdge >(arena);
}
template<> PROTOBUF_NOINLINE ::gpuprofiling::GPUCallingGraph* Arena::CreateMaybeMessage< ::gpuprofiling::GPUCallingGraph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gpuprofiling::GPUCallingGraph >(arena);
}
template<> PROTOBUF_NOINLINE ::gpuprofiling::PCSamplingStallReason* Arena::CreateMaybeMessage< ::gpuprofiling::PCSamplingStallReason >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gpuprofiling::PCSamplingStallReason >(arena);
}
template<> PROTOBUF_NOINLINE ::gpuprofiling::CUptiPCSamplingPCData* Arena::CreateMaybeMessage< ::gpuprofiling::CUptiPCSamplingPCData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gpuprofiling::CUptiPCSamplingPCData >(arena);
}
template<> PROTOBUF_NOINLINE ::gpuprofiling::CUptiPCSamplingData* Arena::CreateMaybeMessage< ::gpuprofiling::CUptiPCSamplingData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gpuprofiling::CUptiPCSamplingData >(arena);
}
template<> PROTOBUF_NOINLINE ::gpuprofiling::GPUProfilingRequest* Arena::CreateMaybeMessage< ::gpuprofiling::GPUProfilingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gpuprofiling::GPUProfilingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gpuprofiling::GPUProfilingResponse* Arena::CreateMaybeMessage< ::gpuprofiling::GPUProfilingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gpuprofiling::GPUProfilingResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
