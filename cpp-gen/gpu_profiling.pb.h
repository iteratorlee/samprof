// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gpu_profiling.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gpu_5fprofiling_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gpu_5fprofiling_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gpu_5fprofiling_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gpu_5fprofiling_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gpu_5fprofiling_2eproto;
namespace gpuprofiling {
class CPUCallingContextNode;
struct CPUCallingContextNodeDefaultTypeInternal;
extern CPUCallingContextNodeDefaultTypeInternal _CPUCallingContextNode_default_instance_;
class CPUCallingContextTree;
struct CPUCallingContextTreeDefaultTypeInternal;
extern CPUCallingContextTreeDefaultTypeInternal _CPUCallingContextTree_default_instance_;
class CPUCallingContextTree_NodeMapEntry_DoNotUse;
struct CPUCallingContextTree_NodeMapEntry_DoNotUseDefaultTypeInternal;
extern CPUCallingContextTree_NodeMapEntry_DoNotUseDefaultTypeInternal _CPUCallingContextTree_NodeMapEntry_DoNotUse_default_instance_;
class CUptiPCSamplingData;
struct CUptiPCSamplingDataDefaultTypeInternal;
extern CUptiPCSamplingDataDefaultTypeInternal _CUptiPCSamplingData_default_instance_;
class CUptiPCSamplingPCData;
struct CUptiPCSamplingPCDataDefaultTypeInternal;
extern CUptiPCSamplingPCDataDefaultTypeInternal _CUptiPCSamplingPCData_default_instance_;
class GPUCallingGraph;
struct GPUCallingGraphDefaultTypeInternal;
extern GPUCallingGraphDefaultTypeInternal _GPUCallingGraph_default_instance_;
class GPUCallingGraphEdge;
struct GPUCallingGraphEdgeDefaultTypeInternal;
extern GPUCallingGraphEdgeDefaultTypeInternal _GPUCallingGraphEdge_default_instance_;
class GPUCallingGraphNode;
struct GPUCallingGraphNodeDefaultTypeInternal;
extern GPUCallingGraphNodeDefaultTypeInternal _GPUCallingGraphNode_default_instance_;
class GPUProfilingRequest;
struct GPUProfilingRequestDefaultTypeInternal;
extern GPUProfilingRequestDefaultTypeInternal _GPUProfilingRequest_default_instance_;
class GPUProfilingResponse;
struct GPUProfilingResponseDefaultTypeInternal;
extern GPUProfilingResponseDefaultTypeInternal _GPUProfilingResponse_default_instance_;
class PCSamplingStallReason;
struct PCSamplingStallReasonDefaultTypeInternal;
extern PCSamplingStallReasonDefaultTypeInternal _PCSamplingStallReason_default_instance_;
}  // namespace gpuprofiling
PROTOBUF_NAMESPACE_OPEN
template<> ::gpuprofiling::CPUCallingContextNode* Arena::CreateMaybeMessage<::gpuprofiling::CPUCallingContextNode>(Arena*);
template<> ::gpuprofiling::CPUCallingContextTree* Arena::CreateMaybeMessage<::gpuprofiling::CPUCallingContextTree>(Arena*);
template<> ::gpuprofiling::CPUCallingContextTree_NodeMapEntry_DoNotUse* Arena::CreateMaybeMessage<::gpuprofiling::CPUCallingContextTree_NodeMapEntry_DoNotUse>(Arena*);
template<> ::gpuprofiling::CUptiPCSamplingData* Arena::CreateMaybeMessage<::gpuprofiling::CUptiPCSamplingData>(Arena*);
template<> ::gpuprofiling::CUptiPCSamplingPCData* Arena::CreateMaybeMessage<::gpuprofiling::CUptiPCSamplingPCData>(Arena*);
template<> ::gpuprofiling::GPUCallingGraph* Arena::CreateMaybeMessage<::gpuprofiling::GPUCallingGraph>(Arena*);
template<> ::gpuprofiling::GPUCallingGraphEdge* Arena::CreateMaybeMessage<::gpuprofiling::GPUCallingGraphEdge>(Arena*);
template<> ::gpuprofiling::GPUCallingGraphNode* Arena::CreateMaybeMessage<::gpuprofiling::GPUCallingGraphNode>(Arena*);
template<> ::gpuprofiling::GPUProfilingRequest* Arena::CreateMaybeMessage<::gpuprofiling::GPUProfilingRequest>(Arena*);
template<> ::gpuprofiling::GPUProfilingResponse* Arena::CreateMaybeMessage<::gpuprofiling::GPUProfilingResponse>(Arena*);
template<> ::gpuprofiling::PCSamplingStallReason* Arena::CreateMaybeMessage<::gpuprofiling::PCSamplingStallReason>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gpuprofiling {

// ===================================================================

class CPUCallingContextTree_NodeMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CPUCallingContextTree_NodeMapEntry_DoNotUse, 
    int64_t, ::gpuprofiling::CPUCallingContextNode,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CPUCallingContextTree_NodeMapEntry_DoNotUse, 
    int64_t, ::gpuprofiling::CPUCallingContextNode,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  CPUCallingContextTree_NodeMapEntry_DoNotUse();
  explicit constexpr CPUCallingContextTree_NodeMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CPUCallingContextTree_NodeMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CPUCallingContextTree_NodeMapEntry_DoNotUse& other);
  static const CPUCallingContextTree_NodeMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CPUCallingContextTree_NodeMapEntry_DoNotUse*>(&_CPUCallingContextTree_NodeMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class CPUCallingContextTree final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gpuprofiling.CPUCallingContextTree) */ {
 public:
  inline CPUCallingContextTree() : CPUCallingContextTree(nullptr) {}
  ~CPUCallingContextTree() override;
  explicit constexpr CPUCallingContextTree(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPUCallingContextTree(const CPUCallingContextTree& from);
  CPUCallingContextTree(CPUCallingContextTree&& from) noexcept
    : CPUCallingContextTree() {
    *this = ::std::move(from);
  }

  inline CPUCallingContextTree& operator=(const CPUCallingContextTree& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPUCallingContextTree& operator=(CPUCallingContextTree&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPUCallingContextTree& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPUCallingContextTree* internal_default_instance() {
    return reinterpret_cast<const CPUCallingContextTree*>(
               &_CPUCallingContextTree_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CPUCallingContextTree& a, CPUCallingContextTree& b) {
    a.Swap(&b);
  }
  inline void Swap(CPUCallingContextTree* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPUCallingContextTree* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPUCallingContextTree* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPUCallingContextTree>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPUCallingContextTree& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPUCallingContextTree& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPUCallingContextTree* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gpuprofiling.CPUCallingContextTree";
  }
  protected:
  explicit CPUCallingContextTree(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kNodeMapFieldNumber = 4,
    kRootFieldNumber = 1,
    kRootPCFieldNumber = 2,
    kRootIDFieldNumber = 3,
  };
  // map<int64, .gpuprofiling.CPUCallingContextNode> nodeMap = 4;
  int nodemap_size() const;
  private:
  int _internal_nodemap_size() const;
  public:
  void clear_nodemap();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::gpuprofiling::CPUCallingContextNode >&
      _internal_nodemap() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::gpuprofiling::CPUCallingContextNode >*
      _internal_mutable_nodemap();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::gpuprofiling::CPUCallingContextNode >&
      nodemap() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::gpuprofiling::CPUCallingContextNode >*
      mutable_nodemap();

  // .gpuprofiling.CPUCallingContextNode root = 1;
  bool has_root() const;
  private:
  bool _internal_has_root() const;
  public:
  void clear_root();
  const ::gpuprofiling::CPUCallingContextNode& root() const;
  PROTOBUF_NODISCARD ::gpuprofiling::CPUCallingContextNode* release_root();
  ::gpuprofiling::CPUCallingContextNode* mutable_root();
  void set_allocated_root(::gpuprofiling::CPUCallingContextNode* root);
  private:
  const ::gpuprofiling::CPUCallingContextNode& _internal_root() const;
  ::gpuprofiling::CPUCallingContextNode* _internal_mutable_root();
  public:
  void unsafe_arena_set_allocated_root(
      ::gpuprofiling::CPUCallingContextNode* root);
  ::gpuprofiling::CPUCallingContextNode* unsafe_arena_release_root();

  // uint64 rootPC = 2;
  void clear_rootpc();
  uint64_t rootpc() const;
  void set_rootpc(uint64_t value);
  private:
  uint64_t _internal_rootpc() const;
  void _internal_set_rootpc(uint64_t value);
  public:

  // uint64 rootID = 3;
  void clear_rootid();
  uint64_t rootid() const;
  void set_rootid(uint64_t value);
  private:
  uint64_t _internal_rootid() const;
  void _internal_set_rootid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:gpuprofiling.CPUCallingContextTree)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      CPUCallingContextTree_NodeMapEntry_DoNotUse,
      int64_t, ::gpuprofiling::CPUCallingContextNode,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> nodemap_;
  ::gpuprofiling::CPUCallingContextNode* root_;
  uint64_t rootpc_;
  uint64_t rootid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gpu_5fprofiling_2eproto;
};
// -------------------------------------------------------------------

class CPUCallingContextNode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gpuprofiling.CPUCallingContextNode) */ {
 public:
  inline CPUCallingContextNode() : CPUCallingContextNode(nullptr) {}
  ~CPUCallingContextNode() override;
  explicit constexpr CPUCallingContextNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPUCallingContextNode(const CPUCallingContextNode& from);
  CPUCallingContextNode(CPUCallingContextNode&& from) noexcept
    : CPUCallingContextNode() {
    *this = ::std::move(from);
  }

  inline CPUCallingContextNode& operator=(const CPUCallingContextNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPUCallingContextNode& operator=(CPUCallingContextNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPUCallingContextNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPUCallingContextNode* internal_default_instance() {
    return reinterpret_cast<const CPUCallingContextNode*>(
               &_CPUCallingContextNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CPUCallingContextNode& a, CPUCallingContextNode& b) {
    a.Swap(&b);
  }
  inline void Swap(CPUCallingContextNode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPUCallingContextNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPUCallingContextNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPUCallingContextNode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPUCallingContextNode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPUCallingContextNode& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPUCallingContextNode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gpuprofiling.CPUCallingContextNode";
  }
  protected:
  explicit CPUCallingContextNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildsFieldNumber = 8,
    kChildIDsFieldNumber = 9,
    kChildPCsFieldNumber = 10,
    kFuncNameFieldNumber = 4,
    kIdFieldNumber = 1,
    kPcFieldNumber = 2,
    kOffsetFieldNumber = 3,
    kParentIDFieldNumber = 5,
    kParentPCFieldNumber = 6,
    kSamplesFieldNumber = 7,
  };
  // repeated .gpuprofiling.CPUCallingContextNode childs = 8;
  int childs_size() const;
  private:
  int _internal_childs_size() const;
  public:
  void clear_childs();
  ::gpuprofiling::CPUCallingContextNode* mutable_childs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpuprofiling::CPUCallingContextNode >*
      mutable_childs();
  private:
  const ::gpuprofiling::CPUCallingContextNode& _internal_childs(int index) const;
  ::gpuprofiling::CPUCallingContextNode* _internal_add_childs();
  public:
  const ::gpuprofiling::CPUCallingContextNode& childs(int index) const;
  ::gpuprofiling::CPUCallingContextNode* add_childs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpuprofiling::CPUCallingContextNode >&
      childs() const;

  // repeated uint64 childIDs = 9;
  int childids_size() const;
  private:
  int _internal_childids_size() const;
  public:
  void clear_childids();
  private:
  uint64_t _internal_childids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_childids() const;
  void _internal_add_childids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_childids();
  public:
  uint64_t childids(int index) const;
  void set_childids(int index, uint64_t value);
  void add_childids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      childids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_childids();

  // repeated uint64 childPCs = 10;
  int childpcs_size() const;
  private:
  int _internal_childpcs_size() const;
  public:
  void clear_childpcs();
  private:
  uint64_t _internal_childpcs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_childpcs() const;
  void _internal_add_childpcs(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_childpcs();
  public:
  uint64_t childpcs(int index) const;
  void set_childpcs(int index, uint64_t value);
  void add_childpcs(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      childpcs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_childpcs();

  // string funcName = 4;
  void clear_funcname();
  const std::string& funcname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_funcname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_funcname();
  PROTOBUF_NODISCARD std::string* release_funcname();
  void set_allocated_funcname(std::string* funcname);
  private:
  const std::string& _internal_funcname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_funcname(const std::string& value);
  std::string* _internal_mutable_funcname();
  public:

  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // uint64 pc = 2;
  void clear_pc();
  uint64_t pc() const;
  void set_pc(uint64_t value);
  private:
  uint64_t _internal_pc() const;
  void _internal_set_pc(uint64_t value);
  public:

  // uint64 offset = 3;
  void clear_offset();
  uint64_t offset() const;
  void set_offset(uint64_t value);
  private:
  uint64_t _internal_offset() const;
  void _internal_set_offset(uint64_t value);
  public:

  // uint64 parentID = 5;
  void clear_parentid();
  uint64_t parentid() const;
  void set_parentid(uint64_t value);
  private:
  uint64_t _internal_parentid() const;
  void _internal_set_parentid(uint64_t value);
  public:

  // uint64 parentPC = 6;
  void clear_parentpc();
  uint64_t parentpc() const;
  void set_parentpc(uint64_t value);
  private:
  uint64_t _internal_parentpc() const;
  void _internal_set_parentpc(uint64_t value);
  public:

  // uint64 samples = 7;
  void clear_samples();
  uint64_t samples() const;
  void set_samples(uint64_t value);
  private:
  uint64_t _internal_samples() const;
  void _internal_set_samples(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:gpuprofiling.CPUCallingContextNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpuprofiling::CPUCallingContextNode > childs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > childids_;
  mutable std::atomic<int> _childids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > childpcs_;
  mutable std::atomic<int> _childpcs_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr funcname_;
  uint64_t id_;
  uint64_t pc_;
  uint64_t offset_;
  uint64_t parentid_;
  uint64_t parentpc_;
  uint64_t samples_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gpu_5fprofiling_2eproto;
};
// -------------------------------------------------------------------

class GPUCallingGraphNode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gpuprofiling.GPUCallingGraphNode) */ {
 public:
  inline GPUCallingGraphNode() : GPUCallingGraphNode(nullptr) {}
  ~GPUCallingGraphNode() override;
  explicit constexpr GPUCallingGraphNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GPUCallingGraphNode(const GPUCallingGraphNode& from);
  GPUCallingGraphNode(GPUCallingGraphNode&& from) noexcept
    : GPUCallingGraphNode() {
    *this = ::std::move(from);
  }

  inline GPUCallingGraphNode& operator=(const GPUCallingGraphNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline GPUCallingGraphNode& operator=(GPUCallingGraphNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GPUCallingGraphNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const GPUCallingGraphNode* internal_default_instance() {
    return reinterpret_cast<const GPUCallingGraphNode*>(
               &_GPUCallingGraphNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GPUCallingGraphNode& a, GPUCallingGraphNode& b) {
    a.Swap(&b);
  }
  inline void Swap(GPUCallingGraphNode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GPUCallingGraphNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GPUCallingGraphNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GPUCallingGraphNode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GPUCallingGraphNode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GPUCallingGraphNode& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GPUCallingGraphNode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gpuprofiling.GPUCallingGraphNode";
  }
  protected:
  explicit GPUCallingGraphNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFuncNameFieldNumber = 2,
    kCubinCrcFieldNumber = 1,
    kAddrBeginFieldNumber = 3,
    kAddrEndFieldNumber = 4,
    kWeightFieldNumber = 5,
  };
  // string funcName = 2;
  void clear_funcname();
  const std::string& funcname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_funcname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_funcname();
  PROTOBUF_NODISCARD std::string* release_funcname();
  void set_allocated_funcname(std::string* funcname);
  private:
  const std::string& _internal_funcname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_funcname(const std::string& value);
  std::string* _internal_mutable_funcname();
  public:

  // uint64 cubinCrc = 1;
  void clear_cubincrc();
  uint64_t cubincrc() const;
  void set_cubincrc(uint64_t value);
  private:
  uint64_t _internal_cubincrc() const;
  void _internal_set_cubincrc(uint64_t value);
  public:

  // uint64 addrBegin = 3;
  void clear_addrbegin();
  uint64_t addrbegin() const;
  void set_addrbegin(uint64_t value);
  private:
  uint64_t _internal_addrbegin() const;
  void _internal_set_addrbegin(uint64_t value);
  public:

  // uint64 addrEnd = 4;
  void clear_addrend();
  uint64_t addrend() const;
  void set_addrend(uint64_t value);
  private:
  uint64_t _internal_addrend() const;
  void _internal_set_addrend(uint64_t value);
  public:

  // uint64 weight = 5;
  void clear_weight();
  uint64_t weight() const;
  void set_weight(uint64_t value);
  private:
  uint64_t _internal_weight() const;
  void _internal_set_weight(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:gpuprofiling.GPUCallingGraphNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr funcname_;
  uint64_t cubincrc_;
  uint64_t addrbegin_;
  uint64_t addrend_;
  uint64_t weight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gpu_5fprofiling_2eproto;
};
// -------------------------------------------------------------------

class GPUCallingGraphEdge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gpuprofiling.GPUCallingGraphEdge) */ {
 public:
  inline GPUCallingGraphEdge() : GPUCallingGraphEdge(nullptr) {}
  ~GPUCallingGraphEdge() override;
  explicit constexpr GPUCallingGraphEdge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GPUCallingGraphEdge(const GPUCallingGraphEdge& from);
  GPUCallingGraphEdge(GPUCallingGraphEdge&& from) noexcept
    : GPUCallingGraphEdge() {
    *this = ::std::move(from);
  }

  inline GPUCallingGraphEdge& operator=(const GPUCallingGraphEdge& from) {
    CopyFrom(from);
    return *this;
  }
  inline GPUCallingGraphEdge& operator=(GPUCallingGraphEdge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GPUCallingGraphEdge& default_instance() {
    return *internal_default_instance();
  }
  static inline const GPUCallingGraphEdge* internal_default_instance() {
    return reinterpret_cast<const GPUCallingGraphEdge*>(
               &_GPUCallingGraphEdge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GPUCallingGraphEdge& a, GPUCallingGraphEdge& b) {
    a.Swap(&b);
  }
  inline void Swap(GPUCallingGraphEdge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GPUCallingGraphEdge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GPUCallingGraphEdge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GPUCallingGraphEdge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GPUCallingGraphEdge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GPUCallingGraphEdge& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GPUCallingGraphEdge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gpuprofiling.GPUCallingGraphEdge";
  }
  protected:
  explicit GPUCallingGraphEdge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcFuncNameFieldNumber = 1,
    kDstFuncNameFieldNumber = 3,
    kSrcPCOffsetFieldNumber = 2,
    kDstPCOffsetFieldNumber = 4,
    kWeightFieldNumber = 5,
  };
  // string srcFuncName = 1;
  void clear_srcfuncname();
  const std::string& srcfuncname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_srcfuncname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_srcfuncname();
  PROTOBUF_NODISCARD std::string* release_srcfuncname();
  void set_allocated_srcfuncname(std::string* srcfuncname);
  private:
  const std::string& _internal_srcfuncname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_srcfuncname(const std::string& value);
  std::string* _internal_mutable_srcfuncname();
  public:

  // string dstFuncName = 3;
  void clear_dstfuncname();
  const std::string& dstfuncname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dstfuncname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dstfuncname();
  PROTOBUF_NODISCARD std::string* release_dstfuncname();
  void set_allocated_dstfuncname(std::string* dstfuncname);
  private:
  const std::string& _internal_dstfuncname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dstfuncname(const std::string& value);
  std::string* _internal_mutable_dstfuncname();
  public:

  // uint64 srcPCOffset = 2;
  void clear_srcpcoffset();
  uint64_t srcpcoffset() const;
  void set_srcpcoffset(uint64_t value);
  private:
  uint64_t _internal_srcpcoffset() const;
  void _internal_set_srcpcoffset(uint64_t value);
  public:

  // uint64 dstPCOffset = 4;
  void clear_dstpcoffset();
  uint64_t dstpcoffset() const;
  void set_dstpcoffset(uint64_t value);
  private:
  uint64_t _internal_dstpcoffset() const;
  void _internal_set_dstpcoffset(uint64_t value);
  public:

  // uint64 weight = 5;
  void clear_weight();
  uint64_t weight() const;
  void set_weight(uint64_t value);
  private:
  uint64_t _internal_weight() const;
  void _internal_set_weight(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:gpuprofiling.GPUCallingGraphEdge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srcfuncname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dstfuncname_;
  uint64_t srcpcoffset_;
  uint64_t dstpcoffset_;
  uint64_t weight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gpu_5fprofiling_2eproto;
};
// -------------------------------------------------------------------

class GPUCallingGraph final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gpuprofiling.GPUCallingGraph) */ {
 public:
  inline GPUCallingGraph() : GPUCallingGraph(nullptr) {}
  ~GPUCallingGraph() override;
  explicit constexpr GPUCallingGraph(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GPUCallingGraph(const GPUCallingGraph& from);
  GPUCallingGraph(GPUCallingGraph&& from) noexcept
    : GPUCallingGraph() {
    *this = ::std::move(from);
  }

  inline GPUCallingGraph& operator=(const GPUCallingGraph& from) {
    CopyFrom(from);
    return *this;
  }
  inline GPUCallingGraph& operator=(GPUCallingGraph&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GPUCallingGraph& default_instance() {
    return *internal_default_instance();
  }
  static inline const GPUCallingGraph* internal_default_instance() {
    return reinterpret_cast<const GPUCallingGraph*>(
               &_GPUCallingGraph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GPUCallingGraph& a, GPUCallingGraph& b) {
    a.Swap(&b);
  }
  inline void Swap(GPUCallingGraph* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GPUCallingGraph* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GPUCallingGraph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GPUCallingGraph>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GPUCallingGraph& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GPUCallingGraph& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GPUCallingGraph* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gpuprofiling.GPUCallingGraph";
  }
  protected:
  explicit GPUCallingGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 1,
    kEdgesFieldNumber = 2,
  };
  // repeated .gpuprofiling.GPUCallingGraphNode nodes = 1;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::gpuprofiling::GPUCallingGraphNode* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpuprofiling::GPUCallingGraphNode >*
      mutable_nodes();
  private:
  const ::gpuprofiling::GPUCallingGraphNode& _internal_nodes(int index) const;
  ::gpuprofiling::GPUCallingGraphNode* _internal_add_nodes();
  public:
  const ::gpuprofiling::GPUCallingGraphNode& nodes(int index) const;
  ::gpuprofiling::GPUCallingGraphNode* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpuprofiling::GPUCallingGraphNode >&
      nodes() const;

  // repeated .gpuprofiling.GPUCallingGraphEdge edges = 2;
  int edges_size() const;
  private:
  int _internal_edges_size() const;
  public:
  void clear_edges();
  ::gpuprofiling::GPUCallingGraphEdge* mutable_edges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpuprofiling::GPUCallingGraphEdge >*
      mutable_edges();
  private:
  const ::gpuprofiling::GPUCallingGraphEdge& _internal_edges(int index) const;
  ::gpuprofiling::GPUCallingGraphEdge* _internal_add_edges();
  public:
  const ::gpuprofiling::GPUCallingGraphEdge& edges(int index) const;
  ::gpuprofiling::GPUCallingGraphEdge* add_edges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpuprofiling::GPUCallingGraphEdge >&
      edges() const;

  // @@protoc_insertion_point(class_scope:gpuprofiling.GPUCallingGraph)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpuprofiling::GPUCallingGraphNode > nodes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpuprofiling::GPUCallingGraphEdge > edges_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gpu_5fprofiling_2eproto;
};
// -------------------------------------------------------------------

class PCSamplingStallReason final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gpuprofiling.PCSamplingStallReason) */ {
 public:
  inline PCSamplingStallReason() : PCSamplingStallReason(nullptr) {}
  ~PCSamplingStallReason() override;
  explicit constexpr PCSamplingStallReason(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PCSamplingStallReason(const PCSamplingStallReason& from);
  PCSamplingStallReason(PCSamplingStallReason&& from) noexcept
    : PCSamplingStallReason() {
    *this = ::std::move(from);
  }

  inline PCSamplingStallReason& operator=(const PCSamplingStallReason& from) {
    CopyFrom(from);
    return *this;
  }
  inline PCSamplingStallReason& operator=(PCSamplingStallReason&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PCSamplingStallReason& default_instance() {
    return *internal_default_instance();
  }
  static inline const PCSamplingStallReason* internal_default_instance() {
    return reinterpret_cast<const PCSamplingStallReason*>(
               &_PCSamplingStallReason_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PCSamplingStallReason& a, PCSamplingStallReason& b) {
    a.Swap(&b);
  }
  inline void Swap(PCSamplingStallReason* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PCSamplingStallReason* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PCSamplingStallReason* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PCSamplingStallReason>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PCSamplingStallReason& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PCSamplingStallReason& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PCSamplingStallReason* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gpuprofiling.PCSamplingStallReason";
  }
  protected:
  explicit PCSamplingStallReason(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPcSamplingStallReasonIndexFieldNumber = 1,
    kSamplesFieldNumber = 2,
  };
  // uint32 pcSamplingStallReasonIndex = 1;
  void clear_pcsamplingstallreasonindex();
  uint32_t pcsamplingstallreasonindex() const;
  void set_pcsamplingstallreasonindex(uint32_t value);
  private:
  uint32_t _internal_pcsamplingstallreasonindex() const;
  void _internal_set_pcsamplingstallreasonindex(uint32_t value);
  public:

  // uint32 samples = 2;
  void clear_samples();
  uint32_t samples() const;
  void set_samples(uint32_t value);
  private:
  uint32_t _internal_samples() const;
  void _internal_set_samples(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:gpuprofiling.PCSamplingStallReason)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t pcsamplingstallreasonindex_;
  uint32_t samples_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gpu_5fprofiling_2eproto;
};
// -------------------------------------------------------------------

class CUptiPCSamplingPCData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gpuprofiling.CUptiPCSamplingPCData) */ {
 public:
  inline CUptiPCSamplingPCData() : CUptiPCSamplingPCData(nullptr) {}
  ~CUptiPCSamplingPCData() override;
  explicit constexpr CUptiPCSamplingPCData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CUptiPCSamplingPCData(const CUptiPCSamplingPCData& from);
  CUptiPCSamplingPCData(CUptiPCSamplingPCData&& from) noexcept
    : CUptiPCSamplingPCData() {
    *this = ::std::move(from);
  }

  inline CUptiPCSamplingPCData& operator=(const CUptiPCSamplingPCData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUptiPCSamplingPCData& operator=(CUptiPCSamplingPCData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CUptiPCSamplingPCData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CUptiPCSamplingPCData* internal_default_instance() {
    return reinterpret_cast<const CUptiPCSamplingPCData*>(
               &_CUptiPCSamplingPCData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CUptiPCSamplingPCData& a, CUptiPCSamplingPCData& b) {
    a.Swap(&b);
  }
  inline void Swap(CUptiPCSamplingPCData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CUptiPCSamplingPCData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CUptiPCSamplingPCData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CUptiPCSamplingPCData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CUptiPCSamplingPCData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CUptiPCSamplingPCData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUptiPCSamplingPCData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gpuprofiling.CUptiPCSamplingPCData";
  }
  protected:
  explicit CUptiPCSamplingPCData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStallReasonFieldNumber = 8,
    kFunctionNameFieldNumber = 6,
    kCubinCrcFieldNumber = 2,
    kSizeFieldNumber = 1,
    kFunctionIndexFieldNumber = 4,
    kPcOffsetFieldNumber = 3,
    kPadFieldNumber = 5,
    kStallReasonCountFieldNumber = 7,
    kParentCPUPCIDFieldNumber = 9,
    kCorrelationIdFieldNumber = 10,
  };
  // repeated .gpuprofiling.PCSamplingStallReason stallReason = 8;
  int stallreason_size() const;
  private:
  int _internal_stallreason_size() const;
  public:
  void clear_stallreason();
  ::gpuprofiling::PCSamplingStallReason* mutable_stallreason(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpuprofiling::PCSamplingStallReason >*
      mutable_stallreason();
  private:
  const ::gpuprofiling::PCSamplingStallReason& _internal_stallreason(int index) const;
  ::gpuprofiling::PCSamplingStallReason* _internal_add_stallreason();
  public:
  const ::gpuprofiling::PCSamplingStallReason& stallreason(int index) const;
  ::gpuprofiling::PCSamplingStallReason* add_stallreason();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpuprofiling::PCSamplingStallReason >&
      stallreason() const;

  // string functionName = 6;
  void clear_functionname();
  const std::string& functionname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_functionname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_functionname();
  PROTOBUF_NODISCARD std::string* release_functionname();
  void set_allocated_functionname(std::string* functionname);
  private:
  const std::string& _internal_functionname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_functionname(const std::string& value);
  std::string* _internal_mutable_functionname();
  public:

  // uint64 cubinCrc = 2;
  void clear_cubincrc();
  uint64_t cubincrc() const;
  void set_cubincrc(uint64_t value);
  private:
  uint64_t _internal_cubincrc() const;
  void _internal_set_cubincrc(uint64_t value);
  public:

  // uint32 size = 1;
  void clear_size();
  uint32_t size() const;
  void set_size(uint32_t value);
  private:
  uint32_t _internal_size() const;
  void _internal_set_size(uint32_t value);
  public:

  // uint32 functionIndex = 4;
  void clear_functionindex();
  uint32_t functionindex() const;
  void set_functionindex(uint32_t value);
  private:
  uint32_t _internal_functionindex() const;
  void _internal_set_functionindex(uint32_t value);
  public:

  // uint64 pcOffset = 3;
  void clear_pcoffset();
  uint64_t pcoffset() const;
  void set_pcoffset(uint64_t value);
  private:
  uint64_t _internal_pcoffset() const;
  void _internal_set_pcoffset(uint64_t value);
  public:

  // uint32 pad = 5;
  void clear_pad();
  uint32_t pad() const;
  void set_pad(uint32_t value);
  private:
  uint32_t _internal_pad() const;
  void _internal_set_pad(uint32_t value);
  public:

  // uint32 stallReasonCount = 7;
  void clear_stallreasoncount();
  uint32_t stallreasoncount() const;
  void set_stallreasoncount(uint32_t value);
  private:
  uint32_t _internal_stallreasoncount() const;
  void _internal_set_stallreasoncount(uint32_t value);
  public:

  // int64 parentCPUPCID = 9;
  void clear_parentcpupcid();
  int64_t parentcpupcid() const;
  void set_parentcpupcid(int64_t value);
  private:
  int64_t _internal_parentcpupcid() const;
  void _internal_set_parentcpupcid(int64_t value);
  public:

  // uint32 correlationId = 10;
  void clear_correlationid();
  uint32_t correlationid() const;
  void set_correlationid(uint32_t value);
  private:
  uint32_t _internal_correlationid() const;
  void _internal_set_correlationid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:gpuprofiling.CUptiPCSamplingPCData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpuprofiling::PCSamplingStallReason > stallreason_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr functionname_;
  uint64_t cubincrc_;
  uint32_t size_;
  uint32_t functionindex_;
  uint64_t pcoffset_;
  uint32_t pad_;
  uint32_t stallreasoncount_;
  int64_t parentcpupcid_;
  uint32_t correlationid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gpu_5fprofiling_2eproto;
};
// -------------------------------------------------------------------

class CUptiPCSamplingData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gpuprofiling.CUptiPCSamplingData) */ {
 public:
  inline CUptiPCSamplingData() : CUptiPCSamplingData(nullptr) {}
  ~CUptiPCSamplingData() override;
  explicit constexpr CUptiPCSamplingData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CUptiPCSamplingData(const CUptiPCSamplingData& from);
  CUptiPCSamplingData(CUptiPCSamplingData&& from) noexcept
    : CUptiPCSamplingData() {
    *this = ::std::move(from);
  }

  inline CUptiPCSamplingData& operator=(const CUptiPCSamplingData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUptiPCSamplingData& operator=(CUptiPCSamplingData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CUptiPCSamplingData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CUptiPCSamplingData* internal_default_instance() {
    return reinterpret_cast<const CUptiPCSamplingData*>(
               &_CUptiPCSamplingData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CUptiPCSamplingData& a, CUptiPCSamplingData& b) {
    a.Swap(&b);
  }
  inline void Swap(CUptiPCSamplingData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CUptiPCSamplingData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CUptiPCSamplingData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CUptiPCSamplingData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CUptiPCSamplingData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CUptiPCSamplingData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUptiPCSamplingData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gpuprofiling.CUptiPCSamplingData";
  }
  protected:
  explicit CUptiPCSamplingData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPPcDataFieldNumber = 8,
    kSizeFieldNumber = 1,
    kCollectNumPcsFieldNumber = 2,
    kTotalSamplesFieldNumber = 3,
    kDroppedSamplesFieldNumber = 4,
    kTotalNumPcsFieldNumber = 5,
    kRemainingNumPcsFieldNumber = 6,
    kRangeIdFieldNumber = 7,
    kNonUsrKernelsTotalSamplesFieldNumber = 9,
  };
  // repeated .gpuprofiling.CUptiPCSamplingPCData pPcData = 8;
  int ppcdata_size() const;
  private:
  int _internal_ppcdata_size() const;
  public:
  void clear_ppcdata();
  ::gpuprofiling::CUptiPCSamplingPCData* mutable_ppcdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpuprofiling::CUptiPCSamplingPCData >*
      mutable_ppcdata();
  private:
  const ::gpuprofiling::CUptiPCSamplingPCData& _internal_ppcdata(int index) const;
  ::gpuprofiling::CUptiPCSamplingPCData* _internal_add_ppcdata();
  public:
  const ::gpuprofiling::CUptiPCSamplingPCData& ppcdata(int index) const;
  ::gpuprofiling::CUptiPCSamplingPCData* add_ppcdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpuprofiling::CUptiPCSamplingPCData >&
      ppcdata() const;

  // uint32 size = 1;
  void clear_size();
  uint32_t size() const;
  void set_size(uint32_t value);
  private:
  uint32_t _internal_size() const;
  void _internal_set_size(uint32_t value);
  public:

  // uint32 collectNumPcs = 2;
  void clear_collectnumpcs();
  uint32_t collectnumpcs() const;
  void set_collectnumpcs(uint32_t value);
  private:
  uint32_t _internal_collectnumpcs() const;
  void _internal_set_collectnumpcs(uint32_t value);
  public:

  // uint64 totalSamples = 3;
  void clear_totalsamples();
  uint64_t totalsamples() const;
  void set_totalsamples(uint64_t value);
  private:
  uint64_t _internal_totalsamples() const;
  void _internal_set_totalsamples(uint64_t value);
  public:

  // uint64 droppedSamples = 4;
  void clear_droppedsamples();
  uint64_t droppedsamples() const;
  void set_droppedsamples(uint64_t value);
  private:
  uint64_t _internal_droppedsamples() const;
  void _internal_set_droppedsamples(uint64_t value);
  public:

  // uint32 totalNumPcs = 5;
  void clear_totalnumpcs();
  uint32_t totalnumpcs() const;
  void set_totalnumpcs(uint32_t value);
  private:
  uint32_t _internal_totalnumpcs() const;
  void _internal_set_totalnumpcs(uint32_t value);
  public:

  // uint32 remainingNumPcs = 6;
  void clear_remainingnumpcs();
  uint32_t remainingnumpcs() const;
  void set_remainingnumpcs(uint32_t value);
  private:
  uint32_t _internal_remainingnumpcs() const;
  void _internal_set_remainingnumpcs(uint32_t value);
  public:

  // uint64 rangeId = 7;
  void clear_rangeid();
  uint64_t rangeid() const;
  void set_rangeid(uint64_t value);
  private:
  uint64_t _internal_rangeid() const;
  void _internal_set_rangeid(uint64_t value);
  public:

  // uint64 nonUsrKernelsTotalSamples = 9;
  void clear_nonusrkernelstotalsamples();
  uint64_t nonusrkernelstotalsamples() const;
  void set_nonusrkernelstotalsamples(uint64_t value);
  private:
  uint64_t _internal_nonusrkernelstotalsamples() const;
  void _internal_set_nonusrkernelstotalsamples(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:gpuprofiling.CUptiPCSamplingData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpuprofiling::CUptiPCSamplingPCData > ppcdata_;
  uint32_t size_;
  uint32_t collectnumpcs_;
  uint64_t totalsamples_;
  uint64_t droppedsamples_;
  uint32_t totalnumpcs_;
  uint32_t remainingnumpcs_;
  uint64_t rangeid_;
  uint64_t nonusrkernelstotalsamples_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gpu_5fprofiling_2eproto;
};
// -------------------------------------------------------------------

class GPUProfilingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gpuprofiling.GPUProfilingRequest) */ {
 public:
  inline GPUProfilingRequest() : GPUProfilingRequest(nullptr) {}
  ~GPUProfilingRequest() override;
  explicit constexpr GPUProfilingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GPUProfilingRequest(const GPUProfilingRequest& from);
  GPUProfilingRequest(GPUProfilingRequest&& from) noexcept
    : GPUProfilingRequest() {
    *this = ::std::move(from);
  }

  inline GPUProfilingRequest& operator=(const GPUProfilingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GPUProfilingRequest& operator=(GPUProfilingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GPUProfilingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GPUProfilingRequest* internal_default_instance() {
    return reinterpret_cast<const GPUProfilingRequest*>(
               &_GPUProfilingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GPUProfilingRequest& a, GPUProfilingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GPUProfilingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GPUProfilingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GPUProfilingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GPUProfilingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GPUProfilingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GPUProfilingRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GPUProfilingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gpuprofiling.GPUProfilingRequest";
  }
  protected:
  explicit GPUProfilingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDurationFieldNumber = 1,
  };
  // uint32 duration = 1;
  void clear_duration();
  uint32_t duration() const;
  void set_duration(uint32_t value);
  private:
  uint32_t _internal_duration() const;
  void _internal_set_duration(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:gpuprofiling.GPUProfilingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t duration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gpu_5fprofiling_2eproto;
};
// -------------------------------------------------------------------

class GPUProfilingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gpuprofiling.GPUProfilingResponse) */ {
 public:
  inline GPUProfilingResponse() : GPUProfilingResponse(nullptr) {}
  ~GPUProfilingResponse() override;
  explicit constexpr GPUProfilingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GPUProfilingResponse(const GPUProfilingResponse& from);
  GPUProfilingResponse(GPUProfilingResponse&& from) noexcept
    : GPUProfilingResponse() {
    *this = ::std::move(from);
  }

  inline GPUProfilingResponse& operator=(const GPUProfilingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GPUProfilingResponse& operator=(GPUProfilingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GPUProfilingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GPUProfilingResponse* internal_default_instance() {
    return reinterpret_cast<const GPUProfilingResponse*>(
               &_GPUProfilingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GPUProfilingResponse& a, GPUProfilingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GPUProfilingResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GPUProfilingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GPUProfilingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GPUProfilingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GPUProfilingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GPUProfilingResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GPUProfilingResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gpuprofiling.GPUProfilingResponse";
  }
  protected:
  explicit GPUProfilingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPcSamplingDataFieldNumber = 3,
    kCpuCallingCtxTreeFieldNumber = 4,
    kMessageFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // repeated .gpuprofiling.CUptiPCSamplingData pcSamplingData = 3;
  int pcsamplingdata_size() const;
  private:
  int _internal_pcsamplingdata_size() const;
  public:
  void clear_pcsamplingdata();
  ::gpuprofiling::CUptiPCSamplingData* mutable_pcsamplingdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpuprofiling::CUptiPCSamplingData >*
      mutable_pcsamplingdata();
  private:
  const ::gpuprofiling::CUptiPCSamplingData& _internal_pcsamplingdata(int index) const;
  ::gpuprofiling::CUptiPCSamplingData* _internal_add_pcsamplingdata();
  public:
  const ::gpuprofiling::CUptiPCSamplingData& pcsamplingdata(int index) const;
  ::gpuprofiling::CUptiPCSamplingData* add_pcsamplingdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpuprofiling::CUptiPCSamplingData >&
      pcsamplingdata() const;

  // repeated .gpuprofiling.CPUCallingContextTree cpuCallingCtxTree = 4;
  int cpucallingctxtree_size() const;
  private:
  int _internal_cpucallingctxtree_size() const;
  public:
  void clear_cpucallingctxtree();
  ::gpuprofiling::CPUCallingContextTree* mutable_cpucallingctxtree(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpuprofiling::CPUCallingContextTree >*
      mutable_cpucallingctxtree();
  private:
  const ::gpuprofiling::CPUCallingContextTree& _internal_cpucallingctxtree(int index) const;
  ::gpuprofiling::CPUCallingContextTree* _internal_add_cpucallingctxtree();
  public:
  const ::gpuprofiling::CPUCallingContextTree& cpucallingctxtree(int index) const;
  ::gpuprofiling::CPUCallingContextTree* add_cpucallingctxtree();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpuprofiling::CPUCallingContextTree >&
      cpucallingctxtree() const;

  // string message = 1;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool version = 2;
  void clear_version();
  bool version() const;
  void set_version(bool value);
  private:
  bool _internal_version() const;
  void _internal_set_version(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gpuprofiling.GPUProfilingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpuprofiling::CUptiPCSamplingData > pcsamplingdata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpuprofiling::CPUCallingContextTree > cpucallingctxtree_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  bool version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gpu_5fprofiling_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CPUCallingContextTree

// .gpuprofiling.CPUCallingContextNode root = 1;
inline bool CPUCallingContextTree::_internal_has_root() const {
  return this != internal_default_instance() && root_ != nullptr;
}
inline bool CPUCallingContextTree::has_root() const {
  return _internal_has_root();
}
inline void CPUCallingContextTree::clear_root() {
  if (GetArenaForAllocation() == nullptr && root_ != nullptr) {
    delete root_;
  }
  root_ = nullptr;
}
inline const ::gpuprofiling::CPUCallingContextNode& CPUCallingContextTree::_internal_root() const {
  const ::gpuprofiling::CPUCallingContextNode* p = root_;
  return p != nullptr ? *p : reinterpret_cast<const ::gpuprofiling::CPUCallingContextNode&>(
      ::gpuprofiling::_CPUCallingContextNode_default_instance_);
}
inline const ::gpuprofiling::CPUCallingContextNode& CPUCallingContextTree::root() const {
  // @@protoc_insertion_point(field_get:gpuprofiling.CPUCallingContextTree.root)
  return _internal_root();
}
inline void CPUCallingContextTree::unsafe_arena_set_allocated_root(
    ::gpuprofiling::CPUCallingContextNode* root) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(root_);
  }
  root_ = root;
  if (root) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gpuprofiling.CPUCallingContextTree.root)
}
inline ::gpuprofiling::CPUCallingContextNode* CPUCallingContextTree::release_root() {
  
  ::gpuprofiling::CPUCallingContextNode* temp = root_;
  root_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gpuprofiling::CPUCallingContextNode* CPUCallingContextTree::unsafe_arena_release_root() {
  // @@protoc_insertion_point(field_release:gpuprofiling.CPUCallingContextTree.root)
  
  ::gpuprofiling::CPUCallingContextNode* temp = root_;
  root_ = nullptr;
  return temp;
}
inline ::gpuprofiling::CPUCallingContextNode* CPUCallingContextTree::_internal_mutable_root() {
  
  if (root_ == nullptr) {
    auto* p = CreateMaybeMessage<::gpuprofiling::CPUCallingContextNode>(GetArenaForAllocation());
    root_ = p;
  }
  return root_;
}
inline ::gpuprofiling::CPUCallingContextNode* CPUCallingContextTree::mutable_root() {
  ::gpuprofiling::CPUCallingContextNode* _msg = _internal_mutable_root();
  // @@protoc_insertion_point(field_mutable:gpuprofiling.CPUCallingContextTree.root)
  return _msg;
}
inline void CPUCallingContextTree::set_allocated_root(::gpuprofiling::CPUCallingContextNode* root) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete root_;
  }
  if (root) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::gpuprofiling::CPUCallingContextNode>::GetOwningArena(root);
    if (message_arena != submessage_arena) {
      root = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, root, submessage_arena);
    }
    
  } else {
    
  }
  root_ = root;
  // @@protoc_insertion_point(field_set_allocated:gpuprofiling.CPUCallingContextTree.root)
}

// uint64 rootPC = 2;
inline void CPUCallingContextTree::clear_rootpc() {
  rootpc_ = uint64_t{0u};
}
inline uint64_t CPUCallingContextTree::_internal_rootpc() const {
  return rootpc_;
}
inline uint64_t CPUCallingContextTree::rootpc() const {
  // @@protoc_insertion_point(field_get:gpuprofiling.CPUCallingContextTree.rootPC)
  return _internal_rootpc();
}
inline void CPUCallingContextTree::_internal_set_rootpc(uint64_t value) {
  
  rootpc_ = value;
}
inline void CPUCallingContextTree::set_rootpc(uint64_t value) {
  _internal_set_rootpc(value);
  // @@protoc_insertion_point(field_set:gpuprofiling.CPUCallingContextTree.rootPC)
}

// uint64 rootID = 3;
inline void CPUCallingContextTree::clear_rootid() {
  rootid_ = uint64_t{0u};
}
inline uint64_t CPUCallingContextTree::_internal_rootid() const {
  return rootid_;
}
inline uint64_t CPUCallingContextTree::rootid() const {
  // @@protoc_insertion_point(field_get:gpuprofiling.CPUCallingContextTree.rootID)
  return _internal_rootid();
}
inline void CPUCallingContextTree::_internal_set_rootid(uint64_t value) {
  
  rootid_ = value;
}
inline void CPUCallingContextTree::set_rootid(uint64_t value) {
  _internal_set_rootid(value);
  // @@protoc_insertion_point(field_set:gpuprofiling.CPUCallingContextTree.rootID)
}

// map<int64, .gpuprofiling.CPUCallingContextNode> nodeMap = 4;
inline int CPUCallingContextTree::_internal_nodemap_size() const {
  return nodemap_.size();
}
inline int CPUCallingContextTree::nodemap_size() const {
  return _internal_nodemap_size();
}
inline void CPUCallingContextTree::clear_nodemap() {
  nodemap_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::gpuprofiling::CPUCallingContextNode >&
CPUCallingContextTree::_internal_nodemap() const {
  return nodemap_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::gpuprofiling::CPUCallingContextNode >&
CPUCallingContextTree::nodemap() const {
  // @@protoc_insertion_point(field_map:gpuprofiling.CPUCallingContextTree.nodeMap)
  return _internal_nodemap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::gpuprofiling::CPUCallingContextNode >*
CPUCallingContextTree::_internal_mutable_nodemap() {
  return nodemap_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::gpuprofiling::CPUCallingContextNode >*
CPUCallingContextTree::mutable_nodemap() {
  // @@protoc_insertion_point(field_mutable_map:gpuprofiling.CPUCallingContextTree.nodeMap)
  return _internal_mutable_nodemap();
}

// -------------------------------------------------------------------

// CPUCallingContextNode

// uint64 id = 1;
inline void CPUCallingContextNode::clear_id() {
  id_ = uint64_t{0u};
}
inline uint64_t CPUCallingContextNode::_internal_id() const {
  return id_;
}
inline uint64_t CPUCallingContextNode::id() const {
  // @@protoc_insertion_point(field_get:gpuprofiling.CPUCallingContextNode.id)
  return _internal_id();
}
inline void CPUCallingContextNode::_internal_set_id(uint64_t value) {
  
  id_ = value;
}
inline void CPUCallingContextNode::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:gpuprofiling.CPUCallingContextNode.id)
}

// uint64 pc = 2;
inline void CPUCallingContextNode::clear_pc() {
  pc_ = uint64_t{0u};
}
inline uint64_t CPUCallingContextNode::_internal_pc() const {
  return pc_;
}
inline uint64_t CPUCallingContextNode::pc() const {
  // @@protoc_insertion_point(field_get:gpuprofiling.CPUCallingContextNode.pc)
  return _internal_pc();
}
inline void CPUCallingContextNode::_internal_set_pc(uint64_t value) {
  
  pc_ = value;
}
inline void CPUCallingContextNode::set_pc(uint64_t value) {
  _internal_set_pc(value);
  // @@protoc_insertion_point(field_set:gpuprofiling.CPUCallingContextNode.pc)
}

// uint64 offset = 3;
inline void CPUCallingContextNode::clear_offset() {
  offset_ = uint64_t{0u};
}
inline uint64_t CPUCallingContextNode::_internal_offset() const {
  return offset_;
}
inline uint64_t CPUCallingContextNode::offset() const {
  // @@protoc_insertion_point(field_get:gpuprofiling.CPUCallingContextNode.offset)
  return _internal_offset();
}
inline void CPUCallingContextNode::_internal_set_offset(uint64_t value) {
  
  offset_ = value;
}
inline void CPUCallingContextNode::set_offset(uint64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:gpuprofiling.CPUCallingContextNode.offset)
}

// string funcName = 4;
inline void CPUCallingContextNode::clear_funcname() {
  funcname_.ClearToEmpty();
}
inline const std::string& CPUCallingContextNode::funcname() const {
  // @@protoc_insertion_point(field_get:gpuprofiling.CPUCallingContextNode.funcName)
  return _internal_funcname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPUCallingContextNode::set_funcname(ArgT0&& arg0, ArgT... args) {
 
 funcname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gpuprofiling.CPUCallingContextNode.funcName)
}
inline std::string* CPUCallingContextNode::mutable_funcname() {
  std::string* _s = _internal_mutable_funcname();
  // @@protoc_insertion_point(field_mutable:gpuprofiling.CPUCallingContextNode.funcName)
  return _s;
}
inline const std::string& CPUCallingContextNode::_internal_funcname() const {
  return funcname_.Get();
}
inline void CPUCallingContextNode::_internal_set_funcname(const std::string& value) {
  
  funcname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPUCallingContextNode::_internal_mutable_funcname() {
  
  return funcname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPUCallingContextNode::release_funcname() {
  // @@protoc_insertion_point(field_release:gpuprofiling.CPUCallingContextNode.funcName)
  return funcname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CPUCallingContextNode::set_allocated_funcname(std::string* funcname) {
  if (funcname != nullptr) {
    
  } else {
    
  }
  funcname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), funcname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (funcname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    funcname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gpuprofiling.CPUCallingContextNode.funcName)
}

// uint64 parentID = 5;
inline void CPUCallingContextNode::clear_parentid() {
  parentid_ = uint64_t{0u};
}
inline uint64_t CPUCallingContextNode::_internal_parentid() const {
  return parentid_;
}
inline uint64_t CPUCallingContextNode::parentid() const {
  // @@protoc_insertion_point(field_get:gpuprofiling.CPUCallingContextNode.parentID)
  return _internal_parentid();
}
inline void CPUCallingContextNode::_internal_set_parentid(uint64_t value) {
  
  parentid_ = value;
}
inline void CPUCallingContextNode::set_parentid(uint64_t value) {
  _internal_set_parentid(value);
  // @@protoc_insertion_point(field_set:gpuprofiling.CPUCallingContextNode.parentID)
}

// uint64 parentPC = 6;
inline void CPUCallingContextNode::clear_parentpc() {
  parentpc_ = uint64_t{0u};
}
inline uint64_t CPUCallingContextNode::_internal_parentpc() const {
  return parentpc_;
}
inline uint64_t CPUCallingContextNode::parentpc() const {
  // @@protoc_insertion_point(field_get:gpuprofiling.CPUCallingContextNode.parentPC)
  return _internal_parentpc();
}
inline void CPUCallingContextNode::_internal_set_parentpc(uint64_t value) {
  
  parentpc_ = value;
}
inline void CPUCallingContextNode::set_parentpc(uint64_t value) {
  _internal_set_parentpc(value);
  // @@protoc_insertion_point(field_set:gpuprofiling.CPUCallingContextNode.parentPC)
}

// uint64 samples = 7;
inline void CPUCallingContextNode::clear_samples() {
  samples_ = uint64_t{0u};
}
inline uint64_t CPUCallingContextNode::_internal_samples() const {
  return samples_;
}
inline uint64_t CPUCallingContextNode::samples() const {
  // @@protoc_insertion_point(field_get:gpuprofiling.CPUCallingContextNode.samples)
  return _internal_samples();
}
inline void CPUCallingContextNode::_internal_set_samples(uint64_t value) {
  
  samples_ = value;
}
inline void CPUCallingContextNode::set_samples(uint64_t value) {
  _internal_set_samples(value);
  // @@protoc_insertion_point(field_set:gpuprofiling.CPUCallingContextNode.samples)
}

// repeated .gpuprofiling.CPUCallingContextNode childs = 8;
inline int CPUCallingContextNode::_internal_childs_size() const {
  return childs_.size();
}
inline int CPUCallingContextNode::childs_size() const {
  return _internal_childs_size();
}
inline void CPUCallingContextNode::clear_childs() {
  childs_.Clear();
}
inline ::gpuprofiling::CPUCallingContextNode* CPUCallingContextNode::mutable_childs(int index) {
  // @@protoc_insertion_point(field_mutable:gpuprofiling.CPUCallingContextNode.childs)
  return childs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpuprofiling::CPUCallingContextNode >*
CPUCallingContextNode::mutable_childs() {
  // @@protoc_insertion_point(field_mutable_list:gpuprofiling.CPUCallingContextNode.childs)
  return &childs_;
}
inline const ::gpuprofiling::CPUCallingContextNode& CPUCallingContextNode::_internal_childs(int index) const {
  return childs_.Get(index);
}
inline const ::gpuprofiling::CPUCallingContextNode& CPUCallingContextNode::childs(int index) const {
  // @@protoc_insertion_point(field_get:gpuprofiling.CPUCallingContextNode.childs)
  return _internal_childs(index);
}
inline ::gpuprofiling::CPUCallingContextNode* CPUCallingContextNode::_internal_add_childs() {
  return childs_.Add();
}
inline ::gpuprofiling::CPUCallingContextNode* CPUCallingContextNode::add_childs() {
  ::gpuprofiling::CPUCallingContextNode* _add = _internal_add_childs();
  // @@protoc_insertion_point(field_add:gpuprofiling.CPUCallingContextNode.childs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpuprofiling::CPUCallingContextNode >&
CPUCallingContextNode::childs() const {
  // @@protoc_insertion_point(field_list:gpuprofiling.CPUCallingContextNode.childs)
  return childs_;
}

// repeated uint64 childIDs = 9;
inline int CPUCallingContextNode::_internal_childids_size() const {
  return childids_.size();
}
inline int CPUCallingContextNode::childids_size() const {
  return _internal_childids_size();
}
inline void CPUCallingContextNode::clear_childids() {
  childids_.Clear();
}
inline uint64_t CPUCallingContextNode::_internal_childids(int index) const {
  return childids_.Get(index);
}
inline uint64_t CPUCallingContextNode::childids(int index) const {
  // @@protoc_insertion_point(field_get:gpuprofiling.CPUCallingContextNode.childIDs)
  return _internal_childids(index);
}
inline void CPUCallingContextNode::set_childids(int index, uint64_t value) {
  childids_.Set(index, value);
  // @@protoc_insertion_point(field_set:gpuprofiling.CPUCallingContextNode.childIDs)
}
inline void CPUCallingContextNode::_internal_add_childids(uint64_t value) {
  childids_.Add(value);
}
inline void CPUCallingContextNode::add_childids(uint64_t value) {
  _internal_add_childids(value);
  // @@protoc_insertion_point(field_add:gpuprofiling.CPUCallingContextNode.childIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CPUCallingContextNode::_internal_childids() const {
  return childids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CPUCallingContextNode::childids() const {
  // @@protoc_insertion_point(field_list:gpuprofiling.CPUCallingContextNode.childIDs)
  return _internal_childids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CPUCallingContextNode::_internal_mutable_childids() {
  return &childids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CPUCallingContextNode::mutable_childids() {
  // @@protoc_insertion_point(field_mutable_list:gpuprofiling.CPUCallingContextNode.childIDs)
  return _internal_mutable_childids();
}

// repeated uint64 childPCs = 10;
inline int CPUCallingContextNode::_internal_childpcs_size() const {
  return childpcs_.size();
}
inline int CPUCallingContextNode::childpcs_size() const {
  return _internal_childpcs_size();
}
inline void CPUCallingContextNode::clear_childpcs() {
  childpcs_.Clear();
}
inline uint64_t CPUCallingContextNode::_internal_childpcs(int index) const {
  return childpcs_.Get(index);
}
inline uint64_t CPUCallingContextNode::childpcs(int index) const {
  // @@protoc_insertion_point(field_get:gpuprofiling.CPUCallingContextNode.childPCs)
  return _internal_childpcs(index);
}
inline void CPUCallingContextNode::set_childpcs(int index, uint64_t value) {
  childpcs_.Set(index, value);
  // @@protoc_insertion_point(field_set:gpuprofiling.CPUCallingContextNode.childPCs)
}
inline void CPUCallingContextNode::_internal_add_childpcs(uint64_t value) {
  childpcs_.Add(value);
}
inline void CPUCallingContextNode::add_childpcs(uint64_t value) {
  _internal_add_childpcs(value);
  // @@protoc_insertion_point(field_add:gpuprofiling.CPUCallingContextNode.childPCs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CPUCallingContextNode::_internal_childpcs() const {
  return childpcs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CPUCallingContextNode::childpcs() const {
  // @@protoc_insertion_point(field_list:gpuprofiling.CPUCallingContextNode.childPCs)
  return _internal_childpcs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CPUCallingContextNode::_internal_mutable_childpcs() {
  return &childpcs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CPUCallingContextNode::mutable_childpcs() {
  // @@protoc_insertion_point(field_mutable_list:gpuprofiling.CPUCallingContextNode.childPCs)
  return _internal_mutable_childpcs();
}

// -------------------------------------------------------------------

// GPUCallingGraphNode

// uint64 cubinCrc = 1;
inline void GPUCallingGraphNode::clear_cubincrc() {
  cubincrc_ = uint64_t{0u};
}
inline uint64_t GPUCallingGraphNode::_internal_cubincrc() const {
  return cubincrc_;
}
inline uint64_t GPUCallingGraphNode::cubincrc() const {
  // @@protoc_insertion_point(field_get:gpuprofiling.GPUCallingGraphNode.cubinCrc)
  return _internal_cubincrc();
}
inline void GPUCallingGraphNode::_internal_set_cubincrc(uint64_t value) {
  
  cubincrc_ = value;
}
inline void GPUCallingGraphNode::set_cubincrc(uint64_t value) {
  _internal_set_cubincrc(value);
  // @@protoc_insertion_point(field_set:gpuprofiling.GPUCallingGraphNode.cubinCrc)
}

// string funcName = 2;
inline void GPUCallingGraphNode::clear_funcname() {
  funcname_.ClearToEmpty();
}
inline const std::string& GPUCallingGraphNode::funcname() const {
  // @@protoc_insertion_point(field_get:gpuprofiling.GPUCallingGraphNode.funcName)
  return _internal_funcname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GPUCallingGraphNode::set_funcname(ArgT0&& arg0, ArgT... args) {
 
 funcname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gpuprofiling.GPUCallingGraphNode.funcName)
}
inline std::string* GPUCallingGraphNode::mutable_funcname() {
  std::string* _s = _internal_mutable_funcname();
  // @@protoc_insertion_point(field_mutable:gpuprofiling.GPUCallingGraphNode.funcName)
  return _s;
}
inline const std::string& GPUCallingGraphNode::_internal_funcname() const {
  return funcname_.Get();
}
inline void GPUCallingGraphNode::_internal_set_funcname(const std::string& value) {
  
  funcname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GPUCallingGraphNode::_internal_mutable_funcname() {
  
  return funcname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GPUCallingGraphNode::release_funcname() {
  // @@protoc_insertion_point(field_release:gpuprofiling.GPUCallingGraphNode.funcName)
  return funcname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GPUCallingGraphNode::set_allocated_funcname(std::string* funcname) {
  if (funcname != nullptr) {
    
  } else {
    
  }
  funcname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), funcname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (funcname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    funcname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gpuprofiling.GPUCallingGraphNode.funcName)
}

// uint64 addrBegin = 3;
inline void GPUCallingGraphNode::clear_addrbegin() {
  addrbegin_ = uint64_t{0u};
}
inline uint64_t GPUCallingGraphNode::_internal_addrbegin() const {
  return addrbegin_;
}
inline uint64_t GPUCallingGraphNode::addrbegin() const {
  // @@protoc_insertion_point(field_get:gpuprofiling.GPUCallingGraphNode.addrBegin)
  return _internal_addrbegin();
}
inline void GPUCallingGraphNode::_internal_set_addrbegin(uint64_t value) {
  
  addrbegin_ = value;
}
inline void GPUCallingGraphNode::set_addrbegin(uint64_t value) {
  _internal_set_addrbegin(value);
  // @@protoc_insertion_point(field_set:gpuprofiling.GPUCallingGraphNode.addrBegin)
}

// uint64 addrEnd = 4;
inline void GPUCallingGraphNode::clear_addrend() {
  addrend_ = uint64_t{0u};
}
inline uint64_t GPUCallingGraphNode::_internal_addrend() const {
  return addrend_;
}
inline uint64_t GPUCallingGraphNode::addrend() const {
  // @@protoc_insertion_point(field_get:gpuprofiling.GPUCallingGraphNode.addrEnd)
  return _internal_addrend();
}
inline void GPUCallingGraphNode::_internal_set_addrend(uint64_t value) {
  
  addrend_ = value;
}
inline void GPUCallingGraphNode::set_addrend(uint64_t value) {
  _internal_set_addrend(value);
  // @@protoc_insertion_point(field_set:gpuprofiling.GPUCallingGraphNode.addrEnd)
}

// uint64 weight = 5;
inline void GPUCallingGraphNode::clear_weight() {
  weight_ = uint64_t{0u};
}
inline uint64_t GPUCallingGraphNode::_internal_weight() const {
  return weight_;
}
inline uint64_t GPUCallingGraphNode::weight() const {
  // @@protoc_insertion_point(field_get:gpuprofiling.GPUCallingGraphNode.weight)
  return _internal_weight();
}
inline void GPUCallingGraphNode::_internal_set_weight(uint64_t value) {
  
  weight_ = value;
}
inline void GPUCallingGraphNode::set_weight(uint64_t value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:gpuprofiling.GPUCallingGraphNode.weight)
}

// -------------------------------------------------------------------

// GPUCallingGraphEdge

// string srcFuncName = 1;
inline void GPUCallingGraphEdge::clear_srcfuncname() {
  srcfuncname_.ClearToEmpty();
}
inline const std::string& GPUCallingGraphEdge::srcfuncname() const {
  // @@protoc_insertion_point(field_get:gpuprofiling.GPUCallingGraphEdge.srcFuncName)
  return _internal_srcfuncname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GPUCallingGraphEdge::set_srcfuncname(ArgT0&& arg0, ArgT... args) {
 
 srcfuncname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gpuprofiling.GPUCallingGraphEdge.srcFuncName)
}
inline std::string* GPUCallingGraphEdge::mutable_srcfuncname() {
  std::string* _s = _internal_mutable_srcfuncname();
  // @@protoc_insertion_point(field_mutable:gpuprofiling.GPUCallingGraphEdge.srcFuncName)
  return _s;
}
inline const std::string& GPUCallingGraphEdge::_internal_srcfuncname() const {
  return srcfuncname_.Get();
}
inline void GPUCallingGraphEdge::_internal_set_srcfuncname(const std::string& value) {
  
  srcfuncname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GPUCallingGraphEdge::_internal_mutable_srcfuncname() {
  
  return srcfuncname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GPUCallingGraphEdge::release_srcfuncname() {
  // @@protoc_insertion_point(field_release:gpuprofiling.GPUCallingGraphEdge.srcFuncName)
  return srcfuncname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GPUCallingGraphEdge::set_allocated_srcfuncname(std::string* srcfuncname) {
  if (srcfuncname != nullptr) {
    
  } else {
    
  }
  srcfuncname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), srcfuncname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (srcfuncname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    srcfuncname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gpuprofiling.GPUCallingGraphEdge.srcFuncName)
}

// uint64 srcPCOffset = 2;
inline void GPUCallingGraphEdge::clear_srcpcoffset() {
  srcpcoffset_ = uint64_t{0u};
}
inline uint64_t GPUCallingGraphEdge::_internal_srcpcoffset() const {
  return srcpcoffset_;
}
inline uint64_t GPUCallingGraphEdge::srcpcoffset() const {
  // @@protoc_insertion_point(field_get:gpuprofiling.GPUCallingGraphEdge.srcPCOffset)
  return _internal_srcpcoffset();
}
inline void GPUCallingGraphEdge::_internal_set_srcpcoffset(uint64_t value) {
  
  srcpcoffset_ = value;
}
inline void GPUCallingGraphEdge::set_srcpcoffset(uint64_t value) {
  _internal_set_srcpcoffset(value);
  // @@protoc_insertion_point(field_set:gpuprofiling.GPUCallingGraphEdge.srcPCOffset)
}

// string dstFuncName = 3;
inline void GPUCallingGraphEdge::clear_dstfuncname() {
  dstfuncname_.ClearToEmpty();
}
inline const std::string& GPUCallingGraphEdge::dstfuncname() const {
  // @@protoc_insertion_point(field_get:gpuprofiling.GPUCallingGraphEdge.dstFuncName)
  return _internal_dstfuncname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GPUCallingGraphEdge::set_dstfuncname(ArgT0&& arg0, ArgT... args) {
 
 dstfuncname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gpuprofiling.GPUCallingGraphEdge.dstFuncName)
}
inline std::string* GPUCallingGraphEdge::mutable_dstfuncname() {
  std::string* _s = _internal_mutable_dstfuncname();
  // @@protoc_insertion_point(field_mutable:gpuprofiling.GPUCallingGraphEdge.dstFuncName)
  return _s;
}
inline const std::string& GPUCallingGraphEdge::_internal_dstfuncname() const {
  return dstfuncname_.Get();
}
inline void GPUCallingGraphEdge::_internal_set_dstfuncname(const std::string& value) {
  
  dstfuncname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GPUCallingGraphEdge::_internal_mutable_dstfuncname() {
  
  return dstfuncname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GPUCallingGraphEdge::release_dstfuncname() {
  // @@protoc_insertion_point(field_release:gpuprofiling.GPUCallingGraphEdge.dstFuncName)
  return dstfuncname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GPUCallingGraphEdge::set_allocated_dstfuncname(std::string* dstfuncname) {
  if (dstfuncname != nullptr) {
    
  } else {
    
  }
  dstfuncname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dstfuncname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dstfuncname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dstfuncname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gpuprofiling.GPUCallingGraphEdge.dstFuncName)
}

// uint64 dstPCOffset = 4;
inline void GPUCallingGraphEdge::clear_dstpcoffset() {
  dstpcoffset_ = uint64_t{0u};
}
inline uint64_t GPUCallingGraphEdge::_internal_dstpcoffset() const {
  return dstpcoffset_;
}
inline uint64_t GPUCallingGraphEdge::dstpcoffset() const {
  // @@protoc_insertion_point(field_get:gpuprofiling.GPUCallingGraphEdge.dstPCOffset)
  return _internal_dstpcoffset();
}
inline void GPUCallingGraphEdge::_internal_set_dstpcoffset(uint64_t value) {
  
  dstpcoffset_ = value;
}
inline void GPUCallingGraphEdge::set_dstpcoffset(uint64_t value) {
  _internal_set_dstpcoffset(value);
  // @@protoc_insertion_point(field_set:gpuprofiling.GPUCallingGraphEdge.dstPCOffset)
}

// uint64 weight = 5;
inline void GPUCallingGraphEdge::clear_weight() {
  weight_ = uint64_t{0u};
}
inline uint64_t GPUCallingGraphEdge::_internal_weight() const {
  return weight_;
}
inline uint64_t GPUCallingGraphEdge::weight() const {
  // @@protoc_insertion_point(field_get:gpuprofiling.GPUCallingGraphEdge.weight)
  return _internal_weight();
}
inline void GPUCallingGraphEdge::_internal_set_weight(uint64_t value) {
  
  weight_ = value;
}
inline void GPUCallingGraphEdge::set_weight(uint64_t value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:gpuprofiling.GPUCallingGraphEdge.weight)
}

// -------------------------------------------------------------------

// GPUCallingGraph

// repeated .gpuprofiling.GPUCallingGraphNode nodes = 1;
inline int GPUCallingGraph::_internal_nodes_size() const {
  return nodes_.size();
}
inline int GPUCallingGraph::nodes_size() const {
  return _internal_nodes_size();
}
inline void GPUCallingGraph::clear_nodes() {
  nodes_.Clear();
}
inline ::gpuprofiling::GPUCallingGraphNode* GPUCallingGraph::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:gpuprofiling.GPUCallingGraph.nodes)
  return nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpuprofiling::GPUCallingGraphNode >*
GPUCallingGraph::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:gpuprofiling.GPUCallingGraph.nodes)
  return &nodes_;
}
inline const ::gpuprofiling::GPUCallingGraphNode& GPUCallingGraph::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline const ::gpuprofiling::GPUCallingGraphNode& GPUCallingGraph::nodes(int index) const {
  // @@protoc_insertion_point(field_get:gpuprofiling.GPUCallingGraph.nodes)
  return _internal_nodes(index);
}
inline ::gpuprofiling::GPUCallingGraphNode* GPUCallingGraph::_internal_add_nodes() {
  return nodes_.Add();
}
inline ::gpuprofiling::GPUCallingGraphNode* GPUCallingGraph::add_nodes() {
  ::gpuprofiling::GPUCallingGraphNode* _add = _internal_add_nodes();
  // @@protoc_insertion_point(field_add:gpuprofiling.GPUCallingGraph.nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpuprofiling::GPUCallingGraphNode >&
GPUCallingGraph::nodes() const {
  // @@protoc_insertion_point(field_list:gpuprofiling.GPUCallingGraph.nodes)
  return nodes_;
}

// repeated .gpuprofiling.GPUCallingGraphEdge edges = 2;
inline int GPUCallingGraph::_internal_edges_size() const {
  return edges_.size();
}
inline int GPUCallingGraph::edges_size() const {
  return _internal_edges_size();
}
inline void GPUCallingGraph::clear_edges() {
  edges_.Clear();
}
inline ::gpuprofiling::GPUCallingGraphEdge* GPUCallingGraph::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:gpuprofiling.GPUCallingGraph.edges)
  return edges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpuprofiling::GPUCallingGraphEdge >*
GPUCallingGraph::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:gpuprofiling.GPUCallingGraph.edges)
  return &edges_;
}
inline const ::gpuprofiling::GPUCallingGraphEdge& GPUCallingGraph::_internal_edges(int index) const {
  return edges_.Get(index);
}
inline const ::gpuprofiling::GPUCallingGraphEdge& GPUCallingGraph::edges(int index) const {
  // @@protoc_insertion_point(field_get:gpuprofiling.GPUCallingGraph.edges)
  return _internal_edges(index);
}
inline ::gpuprofiling::GPUCallingGraphEdge* GPUCallingGraph::_internal_add_edges() {
  return edges_.Add();
}
inline ::gpuprofiling::GPUCallingGraphEdge* GPUCallingGraph::add_edges() {
  ::gpuprofiling::GPUCallingGraphEdge* _add = _internal_add_edges();
  // @@protoc_insertion_point(field_add:gpuprofiling.GPUCallingGraph.edges)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpuprofiling::GPUCallingGraphEdge >&
GPUCallingGraph::edges() const {
  // @@protoc_insertion_point(field_list:gpuprofiling.GPUCallingGraph.edges)
  return edges_;
}

// -------------------------------------------------------------------

// PCSamplingStallReason

// uint32 pcSamplingStallReasonIndex = 1;
inline void PCSamplingStallReason::clear_pcsamplingstallreasonindex() {
  pcsamplingstallreasonindex_ = 0u;
}
inline uint32_t PCSamplingStallReason::_internal_pcsamplingstallreasonindex() const {
  return pcsamplingstallreasonindex_;
}
inline uint32_t PCSamplingStallReason::pcsamplingstallreasonindex() const {
  // @@protoc_insertion_point(field_get:gpuprofiling.PCSamplingStallReason.pcSamplingStallReasonIndex)
  return _internal_pcsamplingstallreasonindex();
}
inline void PCSamplingStallReason::_internal_set_pcsamplingstallreasonindex(uint32_t value) {
  
  pcsamplingstallreasonindex_ = value;
}
inline void PCSamplingStallReason::set_pcsamplingstallreasonindex(uint32_t value) {
  _internal_set_pcsamplingstallreasonindex(value);
  // @@protoc_insertion_point(field_set:gpuprofiling.PCSamplingStallReason.pcSamplingStallReasonIndex)
}

// uint32 samples = 2;
inline void PCSamplingStallReason::clear_samples() {
  samples_ = 0u;
}
inline uint32_t PCSamplingStallReason::_internal_samples() const {
  return samples_;
}
inline uint32_t PCSamplingStallReason::samples() const {
  // @@protoc_insertion_point(field_get:gpuprofiling.PCSamplingStallReason.samples)
  return _internal_samples();
}
inline void PCSamplingStallReason::_internal_set_samples(uint32_t value) {
  
  samples_ = value;
}
inline void PCSamplingStallReason::set_samples(uint32_t value) {
  _internal_set_samples(value);
  // @@protoc_insertion_point(field_set:gpuprofiling.PCSamplingStallReason.samples)
}

// -------------------------------------------------------------------

// CUptiPCSamplingPCData

// uint32 size = 1;
inline void CUptiPCSamplingPCData::clear_size() {
  size_ = 0u;
}
inline uint32_t CUptiPCSamplingPCData::_internal_size() const {
  return size_;
}
inline uint32_t CUptiPCSamplingPCData::size() const {
  // @@protoc_insertion_point(field_get:gpuprofiling.CUptiPCSamplingPCData.size)
  return _internal_size();
}
inline void CUptiPCSamplingPCData::_internal_set_size(uint32_t value) {
  
  size_ = value;
}
inline void CUptiPCSamplingPCData::set_size(uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:gpuprofiling.CUptiPCSamplingPCData.size)
}

// uint64 cubinCrc = 2;
inline void CUptiPCSamplingPCData::clear_cubincrc() {
  cubincrc_ = uint64_t{0u};
}
inline uint64_t CUptiPCSamplingPCData::_internal_cubincrc() const {
  return cubincrc_;
}
inline uint64_t CUptiPCSamplingPCData::cubincrc() const {
  // @@protoc_insertion_point(field_get:gpuprofiling.CUptiPCSamplingPCData.cubinCrc)
  return _internal_cubincrc();
}
inline void CUptiPCSamplingPCData::_internal_set_cubincrc(uint64_t value) {
  
  cubincrc_ = value;
}
inline void CUptiPCSamplingPCData::set_cubincrc(uint64_t value) {
  _internal_set_cubincrc(value);
  // @@protoc_insertion_point(field_set:gpuprofiling.CUptiPCSamplingPCData.cubinCrc)
}

// uint64 pcOffset = 3;
inline void CUptiPCSamplingPCData::clear_pcoffset() {
  pcoffset_ = uint64_t{0u};
}
inline uint64_t CUptiPCSamplingPCData::_internal_pcoffset() const {
  return pcoffset_;
}
inline uint64_t CUptiPCSamplingPCData::pcoffset() const {
  // @@protoc_insertion_point(field_get:gpuprofiling.CUptiPCSamplingPCData.pcOffset)
  return _internal_pcoffset();
}
inline void CUptiPCSamplingPCData::_internal_set_pcoffset(uint64_t value) {
  
  pcoffset_ = value;
}
inline void CUptiPCSamplingPCData::set_pcoffset(uint64_t value) {
  _internal_set_pcoffset(value);
  // @@protoc_insertion_point(field_set:gpuprofiling.CUptiPCSamplingPCData.pcOffset)
}

// uint32 functionIndex = 4;
inline void CUptiPCSamplingPCData::clear_functionindex() {
  functionindex_ = 0u;
}
inline uint32_t CUptiPCSamplingPCData::_internal_functionindex() const {
  return functionindex_;
}
inline uint32_t CUptiPCSamplingPCData::functionindex() const {
  // @@protoc_insertion_point(field_get:gpuprofiling.CUptiPCSamplingPCData.functionIndex)
  return _internal_functionindex();
}
inline void CUptiPCSamplingPCData::_internal_set_functionindex(uint32_t value) {
  
  functionindex_ = value;
}
inline void CUptiPCSamplingPCData::set_functionindex(uint32_t value) {
  _internal_set_functionindex(value);
  // @@protoc_insertion_point(field_set:gpuprofiling.CUptiPCSamplingPCData.functionIndex)
}

// uint32 pad = 5;
inline void CUptiPCSamplingPCData::clear_pad() {
  pad_ = 0u;
}
inline uint32_t CUptiPCSamplingPCData::_internal_pad() const {
  return pad_;
}
inline uint32_t CUptiPCSamplingPCData::pad() const {
  // @@protoc_insertion_point(field_get:gpuprofiling.CUptiPCSamplingPCData.pad)
  return _internal_pad();
}
inline void CUptiPCSamplingPCData::_internal_set_pad(uint32_t value) {
  
  pad_ = value;
}
inline void CUptiPCSamplingPCData::set_pad(uint32_t value) {
  _internal_set_pad(value);
  // @@protoc_insertion_point(field_set:gpuprofiling.CUptiPCSamplingPCData.pad)
}

// string functionName = 6;
inline void CUptiPCSamplingPCData::clear_functionname() {
  functionname_.ClearToEmpty();
}
inline const std::string& CUptiPCSamplingPCData::functionname() const {
  // @@protoc_insertion_point(field_get:gpuprofiling.CUptiPCSamplingPCData.functionName)
  return _internal_functionname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CUptiPCSamplingPCData::set_functionname(ArgT0&& arg0, ArgT... args) {
 
 functionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gpuprofiling.CUptiPCSamplingPCData.functionName)
}
inline std::string* CUptiPCSamplingPCData::mutable_functionname() {
  std::string* _s = _internal_mutable_functionname();
  // @@protoc_insertion_point(field_mutable:gpuprofiling.CUptiPCSamplingPCData.functionName)
  return _s;
}
inline const std::string& CUptiPCSamplingPCData::_internal_functionname() const {
  return functionname_.Get();
}
inline void CUptiPCSamplingPCData::_internal_set_functionname(const std::string& value) {
  
  functionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CUptiPCSamplingPCData::_internal_mutable_functionname() {
  
  return functionname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CUptiPCSamplingPCData::release_functionname() {
  // @@protoc_insertion_point(field_release:gpuprofiling.CUptiPCSamplingPCData.functionName)
  return functionname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CUptiPCSamplingPCData::set_allocated_functionname(std::string* functionname) {
  if (functionname != nullptr) {
    
  } else {
    
  }
  functionname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), functionname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (functionname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    functionname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gpuprofiling.CUptiPCSamplingPCData.functionName)
}

// uint32 stallReasonCount = 7;
inline void CUptiPCSamplingPCData::clear_stallreasoncount() {
  stallreasoncount_ = 0u;
}
inline uint32_t CUptiPCSamplingPCData::_internal_stallreasoncount() const {
  return stallreasoncount_;
}
inline uint32_t CUptiPCSamplingPCData::stallreasoncount() const {
  // @@protoc_insertion_point(field_get:gpuprofiling.CUptiPCSamplingPCData.stallReasonCount)
  return _internal_stallreasoncount();
}
inline void CUptiPCSamplingPCData::_internal_set_stallreasoncount(uint32_t value) {
  
  stallreasoncount_ = value;
}
inline void CUptiPCSamplingPCData::set_stallreasoncount(uint32_t value) {
  _internal_set_stallreasoncount(value);
  // @@protoc_insertion_point(field_set:gpuprofiling.CUptiPCSamplingPCData.stallReasonCount)
}

// repeated .gpuprofiling.PCSamplingStallReason stallReason = 8;
inline int CUptiPCSamplingPCData::_internal_stallreason_size() const {
  return stallreason_.size();
}
inline int CUptiPCSamplingPCData::stallreason_size() const {
  return _internal_stallreason_size();
}
inline void CUptiPCSamplingPCData::clear_stallreason() {
  stallreason_.Clear();
}
inline ::gpuprofiling::PCSamplingStallReason* CUptiPCSamplingPCData::mutable_stallreason(int index) {
  // @@protoc_insertion_point(field_mutable:gpuprofiling.CUptiPCSamplingPCData.stallReason)
  return stallreason_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpuprofiling::PCSamplingStallReason >*
CUptiPCSamplingPCData::mutable_stallreason() {
  // @@protoc_insertion_point(field_mutable_list:gpuprofiling.CUptiPCSamplingPCData.stallReason)
  return &stallreason_;
}
inline const ::gpuprofiling::PCSamplingStallReason& CUptiPCSamplingPCData::_internal_stallreason(int index) const {
  return stallreason_.Get(index);
}
inline const ::gpuprofiling::PCSamplingStallReason& CUptiPCSamplingPCData::stallreason(int index) const {
  // @@protoc_insertion_point(field_get:gpuprofiling.CUptiPCSamplingPCData.stallReason)
  return _internal_stallreason(index);
}
inline ::gpuprofiling::PCSamplingStallReason* CUptiPCSamplingPCData::_internal_add_stallreason() {
  return stallreason_.Add();
}
inline ::gpuprofiling::PCSamplingStallReason* CUptiPCSamplingPCData::add_stallreason() {
  ::gpuprofiling::PCSamplingStallReason* _add = _internal_add_stallreason();
  // @@protoc_insertion_point(field_add:gpuprofiling.CUptiPCSamplingPCData.stallReason)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpuprofiling::PCSamplingStallReason >&
CUptiPCSamplingPCData::stallreason() const {
  // @@protoc_insertion_point(field_list:gpuprofiling.CUptiPCSamplingPCData.stallReason)
  return stallreason_;
}

// int64 parentCPUPCID = 9;
inline void CUptiPCSamplingPCData::clear_parentcpupcid() {
  parentcpupcid_ = int64_t{0};
}
inline int64_t CUptiPCSamplingPCData::_internal_parentcpupcid() const {
  return parentcpupcid_;
}
inline int64_t CUptiPCSamplingPCData::parentcpupcid() const {
  // @@protoc_insertion_point(field_get:gpuprofiling.CUptiPCSamplingPCData.parentCPUPCID)
  return _internal_parentcpupcid();
}
inline void CUptiPCSamplingPCData::_internal_set_parentcpupcid(int64_t value) {
  
  parentcpupcid_ = value;
}
inline void CUptiPCSamplingPCData::set_parentcpupcid(int64_t value) {
  _internal_set_parentcpupcid(value);
  // @@protoc_insertion_point(field_set:gpuprofiling.CUptiPCSamplingPCData.parentCPUPCID)
}

// uint32 correlationId = 10;
inline void CUptiPCSamplingPCData::clear_correlationid() {
  correlationid_ = 0u;
}
inline uint32_t CUptiPCSamplingPCData::_internal_correlationid() const {
  return correlationid_;
}
inline uint32_t CUptiPCSamplingPCData::correlationid() const {
  // @@protoc_insertion_point(field_get:gpuprofiling.CUptiPCSamplingPCData.correlationId)
  return _internal_correlationid();
}
inline void CUptiPCSamplingPCData::_internal_set_correlationid(uint32_t value) {
  
  correlationid_ = value;
}
inline void CUptiPCSamplingPCData::set_correlationid(uint32_t value) {
  _internal_set_correlationid(value);
  // @@protoc_insertion_point(field_set:gpuprofiling.CUptiPCSamplingPCData.correlationId)
}

// -------------------------------------------------------------------

// CUptiPCSamplingData

// uint32 size = 1;
inline void CUptiPCSamplingData::clear_size() {
  size_ = 0u;
}
inline uint32_t CUptiPCSamplingData::_internal_size() const {
  return size_;
}
inline uint32_t CUptiPCSamplingData::size() const {
  // @@protoc_insertion_point(field_get:gpuprofiling.CUptiPCSamplingData.size)
  return _internal_size();
}
inline void CUptiPCSamplingData::_internal_set_size(uint32_t value) {
  
  size_ = value;
}
inline void CUptiPCSamplingData::set_size(uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:gpuprofiling.CUptiPCSamplingData.size)
}

// uint32 collectNumPcs = 2;
inline void CUptiPCSamplingData::clear_collectnumpcs() {
  collectnumpcs_ = 0u;
}
inline uint32_t CUptiPCSamplingData::_internal_collectnumpcs() const {
  return collectnumpcs_;
}
inline uint32_t CUptiPCSamplingData::collectnumpcs() const {
  // @@protoc_insertion_point(field_get:gpuprofiling.CUptiPCSamplingData.collectNumPcs)
  return _internal_collectnumpcs();
}
inline void CUptiPCSamplingData::_internal_set_collectnumpcs(uint32_t value) {
  
  collectnumpcs_ = value;
}
inline void CUptiPCSamplingData::set_collectnumpcs(uint32_t value) {
  _internal_set_collectnumpcs(value);
  // @@protoc_insertion_point(field_set:gpuprofiling.CUptiPCSamplingData.collectNumPcs)
}

// uint64 totalSamples = 3;
inline void CUptiPCSamplingData::clear_totalsamples() {
  totalsamples_ = uint64_t{0u};
}
inline uint64_t CUptiPCSamplingData::_internal_totalsamples() const {
  return totalsamples_;
}
inline uint64_t CUptiPCSamplingData::totalsamples() const {
  // @@protoc_insertion_point(field_get:gpuprofiling.CUptiPCSamplingData.totalSamples)
  return _internal_totalsamples();
}
inline void CUptiPCSamplingData::_internal_set_totalsamples(uint64_t value) {
  
  totalsamples_ = value;
}
inline void CUptiPCSamplingData::set_totalsamples(uint64_t value) {
  _internal_set_totalsamples(value);
  // @@protoc_insertion_point(field_set:gpuprofiling.CUptiPCSamplingData.totalSamples)
}

// uint64 droppedSamples = 4;
inline void CUptiPCSamplingData::clear_droppedsamples() {
  droppedsamples_ = uint64_t{0u};
}
inline uint64_t CUptiPCSamplingData::_internal_droppedsamples() const {
  return droppedsamples_;
}
inline uint64_t CUptiPCSamplingData::droppedsamples() const {
  // @@protoc_insertion_point(field_get:gpuprofiling.CUptiPCSamplingData.droppedSamples)
  return _internal_droppedsamples();
}
inline void CUptiPCSamplingData::_internal_set_droppedsamples(uint64_t value) {
  
  droppedsamples_ = value;
}
inline void CUptiPCSamplingData::set_droppedsamples(uint64_t value) {
  _internal_set_droppedsamples(value);
  // @@protoc_insertion_point(field_set:gpuprofiling.CUptiPCSamplingData.droppedSamples)
}

// uint32 totalNumPcs = 5;
inline void CUptiPCSamplingData::clear_totalnumpcs() {
  totalnumpcs_ = 0u;
}
inline uint32_t CUptiPCSamplingData::_internal_totalnumpcs() const {
  return totalnumpcs_;
}
inline uint32_t CUptiPCSamplingData::totalnumpcs() const {
  // @@protoc_insertion_point(field_get:gpuprofiling.CUptiPCSamplingData.totalNumPcs)
  return _internal_totalnumpcs();
}
inline void CUptiPCSamplingData::_internal_set_totalnumpcs(uint32_t value) {
  
  totalnumpcs_ = value;
}
inline void CUptiPCSamplingData::set_totalnumpcs(uint32_t value) {
  _internal_set_totalnumpcs(value);
  // @@protoc_insertion_point(field_set:gpuprofiling.CUptiPCSamplingData.totalNumPcs)
}

// uint32 remainingNumPcs = 6;
inline void CUptiPCSamplingData::clear_remainingnumpcs() {
  remainingnumpcs_ = 0u;
}
inline uint32_t CUptiPCSamplingData::_internal_remainingnumpcs() const {
  return remainingnumpcs_;
}
inline uint32_t CUptiPCSamplingData::remainingnumpcs() const {
  // @@protoc_insertion_point(field_get:gpuprofiling.CUptiPCSamplingData.remainingNumPcs)
  return _internal_remainingnumpcs();
}
inline void CUptiPCSamplingData::_internal_set_remainingnumpcs(uint32_t value) {
  
  remainingnumpcs_ = value;
}
inline void CUptiPCSamplingData::set_remainingnumpcs(uint32_t value) {
  _internal_set_remainingnumpcs(value);
  // @@protoc_insertion_point(field_set:gpuprofiling.CUptiPCSamplingData.remainingNumPcs)
}

// uint64 rangeId = 7;
inline void CUptiPCSamplingData::clear_rangeid() {
  rangeid_ = uint64_t{0u};
}
inline uint64_t CUptiPCSamplingData::_internal_rangeid() const {
  return rangeid_;
}
inline uint64_t CUptiPCSamplingData::rangeid() const {
  // @@protoc_insertion_point(field_get:gpuprofiling.CUptiPCSamplingData.rangeId)
  return _internal_rangeid();
}
inline void CUptiPCSamplingData::_internal_set_rangeid(uint64_t value) {
  
  rangeid_ = value;
}
inline void CUptiPCSamplingData::set_rangeid(uint64_t value) {
  _internal_set_rangeid(value);
  // @@protoc_insertion_point(field_set:gpuprofiling.CUptiPCSamplingData.rangeId)
}

// repeated .gpuprofiling.CUptiPCSamplingPCData pPcData = 8;
inline int CUptiPCSamplingData::_internal_ppcdata_size() const {
  return ppcdata_.size();
}
inline int CUptiPCSamplingData::ppcdata_size() const {
  return _internal_ppcdata_size();
}
inline void CUptiPCSamplingData::clear_ppcdata() {
  ppcdata_.Clear();
}
inline ::gpuprofiling::CUptiPCSamplingPCData* CUptiPCSamplingData::mutable_ppcdata(int index) {
  // @@protoc_insertion_point(field_mutable:gpuprofiling.CUptiPCSamplingData.pPcData)
  return ppcdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpuprofiling::CUptiPCSamplingPCData >*
CUptiPCSamplingData::mutable_ppcdata() {
  // @@protoc_insertion_point(field_mutable_list:gpuprofiling.CUptiPCSamplingData.pPcData)
  return &ppcdata_;
}
inline const ::gpuprofiling::CUptiPCSamplingPCData& CUptiPCSamplingData::_internal_ppcdata(int index) const {
  return ppcdata_.Get(index);
}
inline const ::gpuprofiling::CUptiPCSamplingPCData& CUptiPCSamplingData::ppcdata(int index) const {
  // @@protoc_insertion_point(field_get:gpuprofiling.CUptiPCSamplingData.pPcData)
  return _internal_ppcdata(index);
}
inline ::gpuprofiling::CUptiPCSamplingPCData* CUptiPCSamplingData::_internal_add_ppcdata() {
  return ppcdata_.Add();
}
inline ::gpuprofiling::CUptiPCSamplingPCData* CUptiPCSamplingData::add_ppcdata() {
  ::gpuprofiling::CUptiPCSamplingPCData* _add = _internal_add_ppcdata();
  // @@protoc_insertion_point(field_add:gpuprofiling.CUptiPCSamplingData.pPcData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpuprofiling::CUptiPCSamplingPCData >&
CUptiPCSamplingData::ppcdata() const {
  // @@protoc_insertion_point(field_list:gpuprofiling.CUptiPCSamplingData.pPcData)
  return ppcdata_;
}

// uint64 nonUsrKernelsTotalSamples = 9;
inline void CUptiPCSamplingData::clear_nonusrkernelstotalsamples() {
  nonusrkernelstotalsamples_ = uint64_t{0u};
}
inline uint64_t CUptiPCSamplingData::_internal_nonusrkernelstotalsamples() const {
  return nonusrkernelstotalsamples_;
}
inline uint64_t CUptiPCSamplingData::nonusrkernelstotalsamples() const {
  // @@protoc_insertion_point(field_get:gpuprofiling.CUptiPCSamplingData.nonUsrKernelsTotalSamples)
  return _internal_nonusrkernelstotalsamples();
}
inline void CUptiPCSamplingData::_internal_set_nonusrkernelstotalsamples(uint64_t value) {
  
  nonusrkernelstotalsamples_ = value;
}
inline void CUptiPCSamplingData::set_nonusrkernelstotalsamples(uint64_t value) {
  _internal_set_nonusrkernelstotalsamples(value);
  // @@protoc_insertion_point(field_set:gpuprofiling.CUptiPCSamplingData.nonUsrKernelsTotalSamples)
}

// -------------------------------------------------------------------

// GPUProfilingRequest

// uint32 duration = 1;
inline void GPUProfilingRequest::clear_duration() {
  duration_ = 0u;
}
inline uint32_t GPUProfilingRequest::_internal_duration() const {
  return duration_;
}
inline uint32_t GPUProfilingRequest::duration() const {
  // @@protoc_insertion_point(field_get:gpuprofiling.GPUProfilingRequest.duration)
  return _internal_duration();
}
inline void GPUProfilingRequest::_internal_set_duration(uint32_t value) {
  
  duration_ = value;
}
inline void GPUProfilingRequest::set_duration(uint32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:gpuprofiling.GPUProfilingRequest.duration)
}

// -------------------------------------------------------------------

// GPUProfilingResponse

// string message = 1;
inline void GPUProfilingResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& GPUProfilingResponse::message() const {
  // @@protoc_insertion_point(field_get:gpuprofiling.GPUProfilingResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GPUProfilingResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gpuprofiling.GPUProfilingResponse.message)
}
inline std::string* GPUProfilingResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:gpuprofiling.GPUProfilingResponse.message)
  return _s;
}
inline const std::string& GPUProfilingResponse::_internal_message() const {
  return message_.Get();
}
inline void GPUProfilingResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GPUProfilingResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GPUProfilingResponse::release_message() {
  // @@protoc_insertion_point(field_release:gpuprofiling.GPUProfilingResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GPUProfilingResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gpuprofiling.GPUProfilingResponse.message)
}

// bool version = 2;
inline void GPUProfilingResponse::clear_version() {
  version_ = false;
}
inline bool GPUProfilingResponse::_internal_version() const {
  return version_;
}
inline bool GPUProfilingResponse::version() const {
  // @@protoc_insertion_point(field_get:gpuprofiling.GPUProfilingResponse.version)
  return _internal_version();
}
inline void GPUProfilingResponse::_internal_set_version(bool value) {
  
  version_ = value;
}
inline void GPUProfilingResponse::set_version(bool value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:gpuprofiling.GPUProfilingResponse.version)
}

// repeated .gpuprofiling.CUptiPCSamplingData pcSamplingData = 3;
inline int GPUProfilingResponse::_internal_pcsamplingdata_size() const {
  return pcsamplingdata_.size();
}
inline int GPUProfilingResponse::pcsamplingdata_size() const {
  return _internal_pcsamplingdata_size();
}
inline void GPUProfilingResponse::clear_pcsamplingdata() {
  pcsamplingdata_.Clear();
}
inline ::gpuprofiling::CUptiPCSamplingData* GPUProfilingResponse::mutable_pcsamplingdata(int index) {
  // @@protoc_insertion_point(field_mutable:gpuprofiling.GPUProfilingResponse.pcSamplingData)
  return pcsamplingdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpuprofiling::CUptiPCSamplingData >*
GPUProfilingResponse::mutable_pcsamplingdata() {
  // @@protoc_insertion_point(field_mutable_list:gpuprofiling.GPUProfilingResponse.pcSamplingData)
  return &pcsamplingdata_;
}
inline const ::gpuprofiling::CUptiPCSamplingData& GPUProfilingResponse::_internal_pcsamplingdata(int index) const {
  return pcsamplingdata_.Get(index);
}
inline const ::gpuprofiling::CUptiPCSamplingData& GPUProfilingResponse::pcsamplingdata(int index) const {
  // @@protoc_insertion_point(field_get:gpuprofiling.GPUProfilingResponse.pcSamplingData)
  return _internal_pcsamplingdata(index);
}
inline ::gpuprofiling::CUptiPCSamplingData* GPUProfilingResponse::_internal_add_pcsamplingdata() {
  return pcsamplingdata_.Add();
}
inline ::gpuprofiling::CUptiPCSamplingData* GPUProfilingResponse::add_pcsamplingdata() {
  ::gpuprofiling::CUptiPCSamplingData* _add = _internal_add_pcsamplingdata();
  // @@protoc_insertion_point(field_add:gpuprofiling.GPUProfilingResponse.pcSamplingData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpuprofiling::CUptiPCSamplingData >&
GPUProfilingResponse::pcsamplingdata() const {
  // @@protoc_insertion_point(field_list:gpuprofiling.GPUProfilingResponse.pcSamplingData)
  return pcsamplingdata_;
}

// repeated .gpuprofiling.CPUCallingContextTree cpuCallingCtxTree = 4;
inline int GPUProfilingResponse::_internal_cpucallingctxtree_size() const {
  return cpucallingctxtree_.size();
}
inline int GPUProfilingResponse::cpucallingctxtree_size() const {
  return _internal_cpucallingctxtree_size();
}
inline void GPUProfilingResponse::clear_cpucallingctxtree() {
  cpucallingctxtree_.Clear();
}
inline ::gpuprofiling::CPUCallingContextTree* GPUProfilingResponse::mutable_cpucallingctxtree(int index) {
  // @@protoc_insertion_point(field_mutable:gpuprofiling.GPUProfilingResponse.cpuCallingCtxTree)
  return cpucallingctxtree_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpuprofiling::CPUCallingContextTree >*
GPUProfilingResponse::mutable_cpucallingctxtree() {
  // @@protoc_insertion_point(field_mutable_list:gpuprofiling.GPUProfilingResponse.cpuCallingCtxTree)
  return &cpucallingctxtree_;
}
inline const ::gpuprofiling::CPUCallingContextTree& GPUProfilingResponse::_internal_cpucallingctxtree(int index) const {
  return cpucallingctxtree_.Get(index);
}
inline const ::gpuprofiling::CPUCallingContextTree& GPUProfilingResponse::cpucallingctxtree(int index) const {
  // @@protoc_insertion_point(field_get:gpuprofiling.GPUProfilingResponse.cpuCallingCtxTree)
  return _internal_cpucallingctxtree(index);
}
inline ::gpuprofiling::CPUCallingContextTree* GPUProfilingResponse::_internal_add_cpucallingctxtree() {
  return cpucallingctxtree_.Add();
}
inline ::gpuprofiling::CPUCallingContextTree* GPUProfilingResponse::add_cpucallingctxtree() {
  ::gpuprofiling::CPUCallingContextTree* _add = _internal_add_cpucallingctxtree();
  // @@protoc_insertion_point(field_add:gpuprofiling.GPUProfilingResponse.cpuCallingCtxTree)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpuprofiling::CPUCallingContextTree >&
GPUProfilingResponse::cpucallingctxtree() const {
  // @@protoc_insertion_point(field_list:gpuprofiling.GPUProfilingResponse.cpuCallingCtxTree)
  return cpucallingctxtree_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gpuprofiling

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gpu_5fprofiling_2eproto
